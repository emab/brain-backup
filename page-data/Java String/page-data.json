{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Java String",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-string\"\n  }, \"Java String\"), mdx(\"p\", null, \"Is not a primitive type, but is sometimes treated as such in Java as the language provides some special support out of the box. Strings can be created using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" around characters.\"), mdx(\"p\", null, \"Strings are constant - their value cannot be changed after they are created.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String str = \\\"abc\\\";\\n\")), mdx(\"p\", null, \"is equivalent to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"char data[] = {'a', 'b', 'c'};\\nString str = new String(data);\\n\")), mdx(\"p\", null, \"Here are some more examples of how strings can be used:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"System.out.println(\\\"abc\\\");\\nString cde = \\\"cde\\\";\\nSystem.out.println(\\\"abc\\\" + cde);\\nString c = \\\"abc\\\".substring(2,3);\\n\")), mdx(\"h2\", {\n    \"id\": \"useful-methods\"\n  }, \"Useful methods\"), mdx(\"h3\", {\n    \"id\": \"indexof\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"indexOf\")), mdx(\"p\", null, \"Multiple versions of this method, but can be useful for code wars style questions when working with strings.\"), mdx(\"p\", null, \"Both of these methods also allow you to supply a second argument \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int fromIndex\"), \" to specify the start point of the search.\"), mdx(\"h4\", {\n    \"id\": \"indexofstring-str--int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"indexOf(String str) : int\")), mdx(\"p\", null, \"Returns the index of the substring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"str\"), \" within the string.\"), mdx(\"h4\", {\n    \"id\": \"indexofint-ch--int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"indexOf(int ch) : int\")), mdx(\"p\", null, \"Returns the index of the first occurrence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ch\"), \" in the String, returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" if it doesn't exist. \"), mdx(\"h3\", {\n    \"id\": \"lastindexof\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"lastIndexOf\")), mdx(\"p\", null, \"Similarly to the method above, but returns the last index of a substring or character within a string. This is useful when you want to check if a substring / character only appears in the string once:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"boolean appearsOnce(String str, char ch) {\\n    return str.indexOf(ch) == str.lastIndexOf(ch);\\n}\\n\")), mdx(\"p\", null, \"Can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int fromIndex\"), \" to specify a certain index to search from.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Java String"},{"depth":2,"value":"Useful methods"},{"depth":3,"value":"indexOf"},{"depth":4,"value":"indexOf(String str) : int"},{"depth":4,"value":"indexOf(int ch) : int"},{"depth":3,"value":"lastIndexOf"}],"outboundReferences":[],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java\"\n  }, \"Java\"), mdx(\"p\", null, \"A place for all things Java.\"), mdx(\"h2\", {\n    \"id\": \"foamlinkjava-primitivesfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Java Primitives\"), \"\"), mdx(\"p\", null, \"Some notes on Java primitives.\"), mdx(\"h2\", {\n    \"id\": \"core-objects\"\n  }, \"Core Objects\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java String\"), \"\")), mdx(\"h2\", {\n    \"id\": \"data-structures\"\n  }, \"Data Structures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java Maps\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"de76c270-f5fa-5778-8893-b860edc64110","fields":{"slug":"/Java","title":"Java"}}}]},"fields":{"slug":"/Java String","title":"Java String"}}},"pageContext":{"id":"62179d5e-0537-54d8-b636-9bcadeb83296"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}