{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Java Maps","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-maps\"\n  }, \"Java Maps\"), mdx(\"p\", null, \"Common implementations: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LinkedHashMap\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TreeMap\")), mdx(\"p\", null, \"An object that maps keys to maps.\"), mdx(\"h2\", {\n    \"id\": \"basic-methods\"\n  }, \"Basic methods\"), mdx(\"h3\", {\n    \"id\": \"putk-key-v-value--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"put(K key, V value) : V\")), mdx(\"p\", null, \"Associates specified key with specified value in this map.\"), mdx(\"h3\", {\n    \"id\": \"getk-key--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"get(K key) : V\")), mdx(\"p\", null, \"Returns the value to which the key is mapped, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if there is no mapping.\"), mdx(\"h3\", {\n    \"id\": \"removek-key--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"remove(K key) : V\")), mdx(\"p\", null, \"Removes the mapping from this map if it is present. Returns the value or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if it wasn't present.\"), mdx(\"h3\", {\n    \"id\": \"removek-key-v-value--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"remove(K key, V value) : boolean\")), mdx(\"p\", null, \"Removes the mapping from this map only if it is mapped to the specified value.\"), mdx(\"h3\", {\n    \"id\": \"replacek-key-v-value--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"replace(K key, V value) : V\")), mdx(\"p\", null, \"Replaces the mapping at the key if it is mapped to some value (including a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" value).\"), mdx(\"p\", null, \"Returns the previously assigned value, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if it does not exist.\"), mdx(\"h3\", {\n    \"id\": \"replacek-key-v-oldvalue-v-newvalue--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"replace(K key, V oldValue, V newValue) : boolean\")), mdx(\"p\", null, \"Replaces the mapping at the key with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newValue\"), \" if it is currently mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"oldValue\"), \".\"), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if the value was replaced.\"), mdx(\"h3\", {\n    \"id\": \"clear--void\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"clear() : void\")), mdx(\"p\", null, \"Removes all mappings from the map.\"), mdx(\"h3\", {\n    \"id\": \"containskeyk-key--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"containsKey(K key) : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if map contains specified key.\"), mdx(\"h3\", {\n    \"id\": \"containsvaluek-value--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"containsValue(K value) : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if map maps one or more keys to the specified value.\"), mdx(\"h3\", {\n    \"id\": \"entryset--setmapentrykv\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"entrySet() : Set<Map.Entry<K,V>>\")), mdx(\"p\", null, \"Returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Set\"), \" of mappings.\"), mdx(\"h3\", {\n    \"id\": \"keyset--setk\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"keySet() : Set<K>\")), mdx(\"p\", null, \"Returns a set of the key values.\"), mdx(\"h3\", {\n    \"id\": \"values--collectionv\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"values() : Collection<V>\")), mdx(\"p\", null, \"Returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Collection\"), \" of the values contained in the map.\"), mdx(\"h3\", {\n    \"id\": \"isempty--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"isEmpty() : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if the map contains no key-value mappings.\"), mdx(\"h2\", {\n    \"id\": \"useful-methods\"\n  }, \"Useful methods\"), mdx(\"h3\", {\n    \"id\": \"getordefaultk-key-v-defaultvalue--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"getOrDefault(K key, V defaultValue) : V\")), mdx(\"p\", null, \"Returns the value to which the key is mapped, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" if there is no mapping.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> freqMap = new HashMap<>();\\n\\n// will place 1 at \\\"a\\\" with zero as a default value\\nfreqMap.put(\\\"a\\\", freqMap.getOrDefault(\\\"a\\\", 0) + 1);\\n\")), mdx(\"h3\", {\n    \"id\": \"computek-key-functionk-key-v-value--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"compute(K key, Function(K key, V value) : V) : V\")), mdx(\"p\", null, \"Computes mapping for specified key and its currently mapped value. If there is no mapping, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"p\", null, \"Returns the computed value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will place 1 at key \\\"a\\\"\\nintMap.compute(\\\"a\\\", (key, value) -> value == null ? 1 : value + 1);\\n\\n// will place 2 at key \\\"a\\\"\\nintMap.compute(\\\"a\\\", (key, value) -> value == null ? 1 : value + 1);\\n\")), mdx(\"h3\", {\n    \"id\": \"computeifabsentk-key-functionk-key--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"computeIfAbsent(K key, Function(K key) : V) : V\")), mdx(\"p\", null, \"If the specified key is not associated with a value (or is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \") it will compute value using mapping function and enter into the map.\"), mdx(\"p\", null, \"Returns the computed value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will place 1 at key \\\"a\\\" and return 1\\nintMap.computeIfAbsent(\\\"a\\\", (key) -> 1);\\n\\n// will not change the value at \\\"a\\\" and return 1\\nintMap.computeIfAbsent(\\\"a\\\", (key) -> 5);\\n\")), mdx(\"h3\", {\n    \"id\": \"computeifpresentk-key-functionk-key-v-value--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"computeIfPresent(K key, Function(K key, V value) : V) : V\")), mdx(\"p\", null, \"If the specified key is present and non-null, it will compute the new value using the mapping function (unless the mapping function returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \").\"), mdx(\"p\", null, \"Returns the computed value;\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will do nothing\\nintMap.computeIfPresent(\\\"a\\\", (key, value) -> 1);\\n\\nintMap.put(\\\"a\\\", 5);\\n\\n// will change value at key \\\"a\\\" to 10 and return 10\\nintMap.computeIfAbsent(\\\"a\\\", (key, value) -> value + 5);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java\"\n  }, \"Java\"), mdx(\"p\", null, \"A place for all things Java.\"), mdx(\"h2\", {\n    \"id\": \"java-primitives\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Java-Primitives\",\n    \"title\": \"Java Primitives\"\n  }, \"[[Java Primitives]]\"), \"\"), mdx(\"p\", null, \"Some notes on Java primitives.\"), mdx(\"h2\", {\n    \"id\": \"core-objects\"\n  }, \"Core Objects\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-String\",\n    \"title\": \"Java String\"\n  }, \"[[Java String]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"data-structures\"\n  }, \"Data Structures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Maps\",\n    \"title\": \"Java Maps\"\n  }, \"[[Java Maps]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f7ebd8c6-140f-5d7d-b988-851d0c62f77d","fields":{"slug":"/Java","title":"Java"}}}]},"fields":{"slug":"/Java Maps","title":"Java Maps"}}},"pageContext":{"id":"c042d9ea-935d-5409-94d9-7a34b38e7acd"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}