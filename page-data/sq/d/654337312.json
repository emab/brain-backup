{"data":{"allFile":{"nodes":[{"name":"Azure Key Vault JavaScript","relativePath":"Azure Key Vault JavaScript.md","fields":{"title":"Azure Key Vault JavaScript"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"azure-key-vault-javascript\"\n  }, \"Azure Key Vault JavaScript\"), mdx(\"p\", null, \"Recently created a project that used Azure AD for single sign-on, and I set up \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Cypress and MSAL SSO\"), \" and came across a classic problem - how do I store and share the secrets across the team?\"), mdx(\"p\", null, \"I've used Azure Key Vault before on a C# project and it worked really well, as it used your Microsoft account to check your permissions in the Azure AD and could automatically inject env variables into your code when running it.\"), mdx(\"p\", null, \"Luckily there are some Azure provided libraries to handle this in JavaScript, and below is the file I used to grab and set some environment variables when running Cypress.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { SecretClient } from \\\"@azure/keyvault-secrets\\\";\\nimport { DefaultAzureCredential } from \\\"@azure/identity\\\";\\n\\nconst { execSync } = require(\\\"child_process\\\");\\n\\n// Azure KV Secret names\\nconst AZURE_AD_CLIENT_SECRET_NAME = \\\"test-ad-client-secret\\\";\\nconst AZURE_AD_PASSWORD_NAME = \\\"test-ad-password\\\";\\n\\n// Azure KV URL\\nconst AZURE_KV_URL = \\\"https://my-kv.vault.azure.net/\\\";\\n\\nasync function main() {\\n  const credential = new DefaultAzureCredential();\\n  const client = new SecretClient(AZURE_KV_URL, credential);\\n\\n  // get the secrets\\n  const { value: AZURE_AD_CLIENT_SECRET } = await client.getSecret(\\n    AZURE_AD_CLIENT_SECRET_NAME\\n  );\\n  const { value: AZURE_AD_PASSWORD } = await client.getSecret(\\n    AZURE_AD_PASSWORD_NAME\\n  );\\n\\n  const ENV_VARS = {\\n    AZURE_AD_CLIENT_SECRET,\\n    AZURE_AD_PASSWORD,\\n  };\\n\\n  const ENV_STRING = Object.keys(ENV_VARS)\\n    .map((key) => `${key}=${ENV_VARS[key]}`)\\n    .join(\\\",\\\");\\n\\n  // run cypress with secrets\\n  execSync(`npm run cypress:open -- --env ${ENV_STRING}`);\\n}\\n\\nmain().catch((error) => {\\n  console.error(\\\"An error occurred:\\\", error);\\n  process.exit(1);\\n});\\n\\n\")), mdx(\"p\", null, \"I was also considering writing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"preinstall\"), \" script which just writes the variables to a file, but that comes with the risk of them being accidentally committed.\"), mdx(\"h2\", {\n    \"id\": \"requirements\"\n  }, \"Requirements\"), mdx(\"p\", null, \"It's worth noting that for this to work properly you also need \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli\"\n  }, \"Azure CLI\"), \" installed. Once installed you should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"az login\"), \" and make sure you're logged into an account with permissions to use the Key Vault.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Azure SSO Integration","relativePath":"Azure SSO Integration.md","fields":{"title":"Azure SSO Integration"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"azure-sso-integration\"\n  }, \"Azure SSO Integration\"), mdx(\"p\", null, \"Done with a React front-end application and a Spring Boot back-end.\"), mdx(\"p\", null, \"Implementation was quite straight forward, and enabled a JWT token to be used to authorize requests from the front-end to the back-end.\"), mdx(\"h2\", {\n    \"id\": \"requirements\"\n  }, \"Requirements\"), mdx(\"h3\", {\n    \"id\": \"cloud\"\n  }, \"Cloud\"), mdx(\"p\", null, \"You'll need an Active Directory initially. From here you create two app registrations, one for the API and one for the App.\"), mdx(\"h4\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"In the API configuration you should add scopes via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Expose an API\"), \". Add an Application URI here then add a scope such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User.Access\"), \". This should give you something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"api://0000000-0000-0000-0000-0000000/User.Access\\n\")), mdx(\"p\", null, \"Below this you should also add the App as a client application.\"), mdx(\"h4\", {\n    \"id\": \"app\"\n  }, \"App\"), mdx(\"p\", null, \"The App authentication should be set up to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Tokens (used for implicit flows)\"), \" and include suitable redirect URIs for login callbacks.\"), mdx(\"p\", null, \"You should then go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API Permissions\"), \" and add the scope we saw above as a permission.\"), mdx(\"p\", null, \"This should now allow a token to be created from the front-end using the scope defined in the API, which will then be decoded by Spring Boot.\"), mdx(\"h3\", {\n    \"id\": \"front-end\"\n  }, \"Front-end\"), mdx(\"p\", null, \"Used the new provided packages from Azure, which provide some handy hooks for authentication if you're using functional components.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@azure/msal-browser\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@azure/msal-react\"))), mdx(\"p\", null, \"Also provide some basic auth config:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"export const msalConfig = {\\n  auth: {\\n    clientId: '<app-registration-client-id>',\\n    authority:\\n      'https://login.microsoftonline.com/<AAD-resource-id>',\\n  },\\n  cache: {\\n    cacheLocation: 'sessionStorage',\\n  },\\n};\\n\\nexport const loginRequest = {\\n  // this corresponds to the User.Read scope for accessing the\\n  // Azure Graph API which holds user info \\n  scopes: ['User.Read'],\\n};\\n\\n// this scope comes from the Azure App Registration setup\\n// This will be the API app url and scope which the front-end will try\\n// to use when authenticating with token\\nexport const USER_API_SCOPE =\\n  'api://<api-url-from-azure>/<Some.Scope>';\\n\")), mdx(\"p\", null, \"Getting and using a token is also straightforward. The below example uses the scope from the file above to request a token - different tokens could be substituted here:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"export default async (\\n  instance: IPublicClientApplication,\\n  account: AccountInfo\\n): Promise<string> => {\\n  const tokenResult = await instance.acquireTokenSilent({\\n    scopes: [USER_API_SCOPE],\\n    account,\\n  });\\n\\n  return tokenResult.accessToken;\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"back-end\"\n  }, \"Back-end\"), mdx(\"p\", null, \"You'll need a couple of dependencies for Spring Boot and Azure to work nicely:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.springframework.boot:spring-boot-starter-security\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"com.azure.spring:azure-spring-boot-starter-active-directory\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.springframework.boot:spring-boot-starter-oauth2-resource-server\"))), mdx(\"p\", null, \"The configuration is minimal for newer versions of Spring Boot:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"import com.azure.spring.aad.webapi.AADResourceServerWebSecurityConfigurerAdapter;\\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\\n\\n@EnableWebSecurity\\n@EnableGlobalMethodSecurity(prePostEnabled = true)\\npublic class AADOAuth2ResourceServerSecurityConfig extends AADResourceServerWebSecurityConfigurerAdapter {\\n    @Override\\n    protected void configure(HttpSecurity http) throws Exception {\\n        super.configure(http);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Remember to add this to your main application if you didn't already:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// Web security\\n@EnableWebSecurity\\n@SpringBootApplication\\npublic class ApiApplication {\\n    public static void main(String[] args) {\\n        SpringApplication.run(ApiApplication.class, args);\\n    }\\n}\\n\")), mdx(\"p\", null, \"You can then check for authorities like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@RestController\\npublic class HelloController {\\n\\n    @GetMapping(\\\"/hello\\\")\\n    @PreAuthorize(\\\"hasAuthority('SCOPE_User.Access')\\\")\\n    public MessageResponse authenticated() {\\n        return new MessageResponse(\\\"Authenticated with API with correct scope!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"I needed the following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application.properties\"), \" in order for this to work properly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-properties\"\n  }, \"azure.activedirectory.tenant-id=<azure-active-directory-tenant-id>\\nazure.activedirectory.client-id=<the-id-of-the-frontend-application>\\n# looks like api://0000000-0000-0000-0000-0000000\\n# we put it before the scope used in the front-end earlier\\nazure.activedirectory.app-id-uri=<the-app-uri-created-in-api-app-registration-page>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Changing Commit Authors","relativePath":"Changing Commit Authors.md","fields":{"title":"Changing Commit Authors"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"changing-commit-authors\"\n  }, \"Changing Commit Authors\"), mdx(\"p\", null, \"#git\"), mdx(\"p\", null, \"Two \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git\"), \" accounts can be annoying. Using \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git SSH\"), \" can help with that, but sometimes you still might forget to set your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.email\"), \" to the correct details.\"), mdx(\"h2\", {\n    \"id\": \"one-commit\"\n  }, \"One commit\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git commit --amend --author=\\\"John Doe <john@doe.org>\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"multiple-commits\"\n  }, \"Multiple commits\"), mdx(\"p\", null, \"To change author for last 2 commits:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git rebase -i HEAD~2\\n\")), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edit\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e\"), \" to any commits you'd like to change the author of. Then for each commit, you can amend as before:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git commit --amend --author=\\\"John Doe <john@doe.org>\\\" --no-edit\\ngit rebase --continue\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"CircleCI Environment Variables","relativePath":"CircleCI Environment Variables.md","fields":{"title":"CircleCI Environment Variables"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"circleci-environment-variables\"\n  }, \"CircleCI Environment Variables\"), mdx(\"p\", null, \"Paramaters can be used when running CircleCI pipelines. One way to do this is via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Project Settings\"), \" page. Once a parameter has been set, it can be used like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"version: 2.1\\n\\nparameters:\\n  isRegression:\\n  type: boolean\\n  default: false\\n  \\n# define jobs here\\n# ...\\n  \\nworkflows:\\n  ui:\\n    when:\\n      not: << pipeline.parameters.isRegression >>\\n    jobs:\\n      - ui\\n  regression:\\n    when: << pipeline.parameters.isRegression >>\\n    jobs:\\n      - regression\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"CircleCI React Front-end Build","relativePath":"CircleCI React Front-end Build.md","fields":{"title":"CircleCI React Front-end Build"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"circleci-react-front-end-build\"\n  }, \"CircleCI React Front-end Build\"), mdx(\"p\", null, \"This uses the official \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Node\"), \" orb to make use of its built in cache for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install\"), \". There are some other commands available such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node/run\"), \" however these must be used as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jobs\"), \", which meant I was unable to change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource_class\"), \" value. It seemed to default to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Large (4vCPU, 8gb)\"), \" which is overkill for a simple build pipeline. By going for this more manual approach we can define a size for the resource.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"orbs:\\n node: circleci/node@5.0.0\\n\\njobs:\\n  ui:\\n  working_directory: ui\\n  executor: node/default\\n  resource_class: small\\n  steps:\\n    - checkout:\\n      path: ~/project\\n    - node/install-packages\\n    - run: npm run lint\\n    - run: npm test\\n    - run: npm run build\\n    \\nworkflows:\\n  ui:\\n    jobs:\\n      - ui\\n\")), mdx(\"p\", null, \"If you're happy to use a larger resource, you can use the build in commands in your workflow:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"orbs:\\n node: circleci/node@5.0.0\\n    \\nworkflows:\\n  ui:\\n    jobs:\\n      - ui\\n\\nexport const _frontmatter = {}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"CircleCI","relativePath":"CircleCI.md","fields":{"title":"CircleCI"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"circleci\"\n  }, \"CircleCI\"), mdx(\"h2\", {\n    \"id\": \"foamlinkcircleci-environment-variablesfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"CircleCI Environment Variables\"), \"\"), mdx(\"h2\", {\n    \"id\": \"foamlinkcircleci-react-front-end-buildfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"CircleCI React Front-end Build\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Complexity","relativePath":"Complexity.md","fields":{"title":"Complexity"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"complexity\"\n  }, \"Complexity\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Time Complexity\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Space Complexity\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Cypress and MSAL SSO","relativePath":"Cypress and MSAL SSO.md","fields":{"title":"Cypress and MSAL SSO"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cypress-and-msal-sso\"\n  }, \"Cypress and MSAL SSO\"), mdx(\"p\", null, \"Created an application that used \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Azure SSO Integration\"), \" and wanted to test with Cypress. I was thinking about bypassing the login altogether but the doucmentation advised against this.\"), mdx(\"p\", null, \"Instead of skipping authentication or manually typing in a username and password each time, you should inject the relevant information into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \".\"), mdx(\"h3\", {\n    \"id\": \"requirements\"\n  }, \"Requirements:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Azure AD Tenant\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Worth creating a seperate one for testing environment\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create the API / App applications as described in \", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\")), mdx(\"h2\", {\n    \"id\": \"cypress-setup\"\n  }, \"Cypress Setup\"), mdx(\"p\", null, \"First you'll need to store some secrets in Cypress to be used when getting auth details:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"// support/authSettings.json\\n{\\n  \\\"authority\\\": \\\"https://login.microsoftonline.com/your-aad-tenant-id\\\",\\n  \\\"clientId\\\": \\\"app-client-id\\\",\\n  \\\"apiScopes\\\": [\\\"api://api-client-id/Data.Read\\\"],\\n  \\\"username\\\": \\\"user@yourcompany.onmicrosoft.com\\\",\\n    \\n  // These are both very secret\\n  \\\"clientSecret\\\": \\\"app-client-secret\\\",\\n  \\\"password\\\": \\\"password\\\"\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WARNING\"), \"\\nYou should \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" check in the test users \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clientSecret\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \" into VCS. See \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Azure Key Vault JavaScript\"), \" for a way to inject these variables, or share them in some other secure way.\"), mdx(\"p\", null, \"Along with the following support file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// support/auth.ts\\n\\nimport { decode } from \\\"jsonwebtoken\\\";  \\nimport * as authSettings from \\\"./authsettings.json\\\";  \\nimport Chainable = Cypress.Chainable;  \\nimport AUTWindow = Cypress.AUTWindow;  \\n  \\n/*  \\n * Adapted from https://github.com/juunas11/AzureAdUiTestAutomation \\n */  \\n\\ntype TokenResponseBody = {  \\n  access_token: string;  \\n  expires_in: number;  \\n  ext_expires_in: number;  \\n  id_token: string;  \\n};  \\n  \\ntype TokenResponse = {  \\n  body: TokenResponseBody;  \\n  status: number;  \\n};  \\n  \\nconst { \\n    authority, \\n    clientId, \\n    apiScopes, \\n    username, \\n    clientSecret, \\n    password } = authSettings;  \\nconst environment = \\\"login.windows.net\\\";  \\n  \\nconst buildAccountEntity = (  \\n  homeAccountId,  \\n realm,  \\n localAccountId,  \\n username,  \\n name  \\n) => ({  \\n  authorityType: \\\"MSSTS\\\",  \\n  clientInfo: \\\"\\\",  \\n  homeAccountId,  \\n  environment,  \\n  realm,  \\n  localAccountId,  \\n  username,  \\n  name,  \\n});  \\n  \\nconst buildIdTokenEntity = (homeAccountId, idToken, realm) => ({  \\n  credentialType: \\\"IdToken\\\",  \\n  homeAccountId,  \\n  environment,  \\n  clientId,  \\n  secret: idToken,  \\n  realm,  \\n});    \\n  \\nconst buildAccessTokenEntity = (  \\n  homeAccountId,  \\n accessToken,  \\n expiresIn,  \\n extExpiresIn,  \\n realm,  \\n scopes  \\n) => {  \\n  const now = Math.floor(Date.now() / 1000);  \\n   return {  \\n    homeAccountId,  \\n     credentialType: \\\"AccessToken\\\",  \\n     secret: accessToken,  \\n     cachedAt: now.toString(),  \\n     expiresOn: (now + expiresIn).toString(),  \\n     extendedExpiresOn: (now + extExpiresIn).toString(),  \\n     environment,  \\n     clientId,  \\n     realm,  \\n     target: scopes.map((s) => s.toLowerCase()).join(\\\" \\\"),  \\n   };  \\n};  \\n  \\nconst injectTokens = (tokenResponse) => {  \\n  const idToken = decode(tokenResponse.id_token);  \\n  const localAccountId = idToken.oid || idToken.sid;  \\n  const realm = idToken.tid;  \\n    const homeAccountId = `${localAccountId}.${realm}`;  \\n    const username = idToken.preferred_username;  \\n    const name = idToken.name;  \\n  \\n    const accountKey = `${homeAccountId}-${environment}-${realm}`;  \\n    const accountEntity = buildAccountEntity(  \\n      homeAccountId,  \\n      realm,  \\n      localAccountId,  \\n      username,  \\n      name  \\n     );  \\n  \\n const idTokenKey = \\n       `${homeAccountId}-${environment}-idtoken-${clientId}-${realm}-`;  \\n const idTokenEntity = buildIdTokenEntity(  \\n    homeAccountId,  \\n    tokenResponse.id_token,  \\n    realm  \\n  );  \\n  \\n const accessTokenKey = \\n       `${homeAccountId}-${environment}-accesstoken-${clientId}-${realm}-${apiScopes.join(  \\n    \\\" \\\")}`;  \\n const accessTokenEntity = buildAccessTokenEntity(  \\n    homeAccountId,  \\n    tokenResponse.access_token,  \\n    tokenResponse.expires_in,  \\n    tokenResponse.ext_expires_in,  \\n    realm,  \\n    apiScopes  \\n  );  \\n  \\n sessionStorage.setItem(accountKey, JSON.stringify(accountEntity));  \\n sessionStorage.setItem(idTokenKey, JSON.stringify(idTokenEntity));  \\n sessionStorage.setItem(accessTokenKey, JSON.stringify(accessTokenEntity));  \\n};  \\n  \\nexport const login = (  \\n  cachedTokenResponse: TokenResponse  \\n): Chainable<Cypress.Response<any>> => {  \\n  let tokenResponse = null;  \\n  let chainable: Chainable<AUTWindow> | Chainable<Cypress.Response<any>> =  \\n    cy.visit(\\\"/\\\");  \\n  \\n  if (!cachedTokenResponse) {  \\n     chainable = chainable.request({  \\n       url: authority + \\\"/oauth2/v2.0/token\\\",  \\n       method: \\\"POST\\\",  \\n       body: {  \\n         grant_type: \\\"password\\\",  \\n         client_id: clientId,  \\n         client_secret: clientSecret,  \\n         scope: [\\\"openid profile\\\"].concat(apiScopes).join(\\\" \\\"),  \\n         username,  \\n         password,  \\n       },  \\n       form: true,  \\n     });  \\n   } else {  \\n     chainable.then(() => {  \\n       return {  \\n         body: cachedTokenResponse,  \\n       };  \\n   });  \\n }  \\n  (chainable as Chainable<Cypress.Response<any>>)  \\n    .then((response: TokenResponse) => {  \\n      injectTokens(response.body);  \\n   tokenResponse = response.body;  \\n   })  \\n   .reload()  \\n   .then(() => {  \\n     return tokenResponse;  \\n });  \\n  \\n return chainable as Chainable<Cypress.Response<any>>;  \\n};\\n\")), mdx(\"p\", null, \"This file is responsible for making a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to Azure AD and setting the session storage with your credentials.\"), mdx(\"p\", null, \"We can now add the exposed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"login\"), \" function to Cypress:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// support/commands.ts\\n\\nlet cachedTokenExpiryTime = new Date().getTime();  \\nlet cachedTokenResponse = null;  \\n  \\nCypress.Commands.add(\\\"login\\\", () => {  \\n  // Clear our cache if tokens are expired  \\n if (cachedTokenExpiryTime <= new Date().getTime()) {  \\n    cachedTokenResponse = null;  \\n }  \\n  \\n  return login(cachedTokenResponse).then((tokenResponse) => {  \\n    cachedTokenResponse = tokenResponse;  \\n    // Set expiry time to 50 minutes from now  \\n    cachedTokenExpiryTime = new Date().getTime() + 50 * 60 * 1000;  \\n  });  \\n});\\n\")), mdx(\"p\", null, \"You should also add a type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// support/index.ts\\n\\n// ***********************************************************  \\n// This example support/index.js is processed and  \\n// loaded automatically before your test files.  \\n//  \\n// This is a great place to put global configuration and  \\n// behavior that modifies Cypress.  \\n//  \\n// You can change the location of this file or turn off  \\n// automatically serving support files with the  \\n// 'supportFile' configuration option.  \\n//  \\n// You can read more here:  \\n// https://on.cypress.io/configuration  \\n// ***********************************************************  \\n  \\n// Import commands.js using ES2015 syntax:  \\nimport \\\"./commands\\\";  \\n  \\n// Alternatively you can use CommonJS syntax:  \\n// require('./commands')  \\ndeclare global {  \\n  namespace Cypress {  \\n    interface Chainable {  \\n      login(): Chainable<Cypress.Response<any>>;  \\n }  \\n  }  \\n}\\n\")), mdx(\"p\", null, \"Now you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"login\"), \" command to skip your splash screen and authenticated a user! \\uD83C\\uDF89\"), mdx(\"p\", null, \"Example usage:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"cy.login().visit(\\\"/secure\\\");\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Event Listener Handler Map React","relativePath":"Event Listener Handler Map React.md","fields":{"title":"Event Listener Handler Map React"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"event-listener-handler-map-react\"\n  }, \"Event Listener Handler Map React\"), mdx(\"p\", null, \"A nice way of creating a map of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventListener\"), \" events and handlers for a react component.\"), mdx(\"p\", null, \"In this example, it includes the input element which the events come from:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type InputListeners = {\\n    [eventType in keyof Parial<WindowEventMap>]: (\\n        input: HTMLInputElement\\n    ) => {\\n        handler: (event: WindowEventMap[eventType]) => void;\\n    };\\n};\\n\\n// usage\\nconst listeners: InputListeners = {\\n    keydown: (input) => ({\\n        // event will be infered as KeyboardEvent\\n        handler: (event) => {\\n            if (e.key === 'Escape') {\\n                input.blur();\\n            }\\n        }\\n    })\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Git Account Switch","relativePath":"Git Account Switch.md","fields":{"title":"Git Account Switch"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-account-switch\"\n  }, \"Git Account Switch\"), mdx(\"p\", null, \"A simple PowerShell application to switch git accounts. Add somewhere and add it to your path.\"), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# personal account globally\\ngitSwitch -Scope Global -Account Personal\\n\\n# work account globally\\ngitSwitch -Scope Global -Account Work\\n\\n# personal account locally\\ngitSwitch -Scope Local -Account Personal\\n\\n# work account locally\\ngitSwitch -Scope Local -Account Work\\n\")), mdx(\"h2\", {\n    \"id\": \"code\"\n  }, \"Code\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# gitswitch.ps\\n\\nparam(\\n  [Parameter(Mandatory=$true)]\\n  [ValidateSet('Global','Local')]\\n  [String]$Scope,\\n \\n  [Parameter(Mandatory=$true)]\\n  [ValidateSet('Work','Personal')]\\n  [String]$Account\\n)\\n\\n$GitScope = if ($Scope -eq 'Global') { '--global' } else { '--local' }\\n\\n$PersonalAccount = [PSCustomObject]@{\\n  Name = 'Personal Name';\\n  Email = 'personal@me.com'\\n}\\n\\n$WorkAccount = [PSCustomObject]@{\\n  Name = 'Work name';\\n  Email = 'work@worky.com'\\n}\\n\\n$GitAccount = if ($Account -eq 'Work') { $WorkAccount} else { $PersonalAccount }\\n\\n\\ngit config $gitScope user.name $GitAccount.Name\\ngit config $gitScope user.email $GitAccount.Email\\n\\nif (-not $LASTEXITCODE) \\n{\\n  Write-Host \\\"Scope:\\\"$Scope\\n  Write-Host \\\"Name:\\\"$GitAccount.Name \\n  Write-Host \\\"Email:\\\"$GitAccount.Email \\n}\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Git SSH","relativePath":"Git SSH.md","fields":{"title":"Git SSH"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-ssh\"\n  }, \"Git SSH\"), mdx(\"p\", null, \"Really useful if you're using two or more \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git\"), \" accounts on a single computer. On windows I initially used the GitHub CLI tool, which allowed the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh auth login\"), \" but this got annoying due to 2FA.\"), mdx(\"p\", null, \"Switching to SSH made this process \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"much\"), \" easier, and it's relatively simple to get it set up.\"), mdx(\"h4\", {\n    \"id\": \"note\"\n  }, \"Note\"), mdx(\"p\", null, \"This will give you the correct permissions when pushing / pulling from a repo, but it will still use your global git config. Make sure to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --local user.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --local user.email\"), \" for each repository.\"), mdx(\"p\", null, \"Alternatively, see \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git Account Switch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"First you'll need to add some files in  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh\"), \" if they don't exist already:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"touch ~/.ssh/config && touch .bash_profile && touch .bashrc\\n\")), mdx(\"h2\", {\n    \"id\": \"ssh-keys\"\n  }, \"SSH Keys\"), mdx(\"p\", null, \"Follow the steps in the section named \\\"Generating a new SSH Key\\\" found in the following documentation from GitHub: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-windows\"\n  }, \"Generating a new SSH key and adding it to the ssh-agent\"))), mdx(\"h2\", {\n    \"id\": \"configure-ssh\"\n  }, \"Configure SSH\"), mdx(\"p\", null, \"Add your accounts using a unique hostname. Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdentityFile\"), \" to the name of the key you created for each account in the previous step.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"# ~/.ssh/config\\n\\n# personal github account\\nHost github.com\\n  HostName github.com\\n  IdentityFile ~/.ssh/id_personal\\n  IdentitiesOnly yes\\n  \\n# work github account\\nHost github-work\\n  HostName github.com\\n  IdentityFile ~/.ssh/id_work\\n  IdentitiesOnly yes\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"When cloning a repository, you can use each hostname depending on which account you'd like to use. For example your personal account:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone git@github.com:Username/repo.git\\n\")), mdx(\"p\", null, \"And for your work account:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone git@github-work:Username/repo.git\\n\")), mdx(\"p\", null, \"If you have an existing repository and want to update it to use SSH to avoid permission issues (assuming remote is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git remove -v\\ngit remote set-url origin git@github.com:Username/repo.git\\n\")), mdx(\"p\", null, \"Replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@github.com\"), \" with whatever hostname you'd like to use.\"), mdx(\"h2\", {\n    \"id\": \"auto-startup\"\n  }, \"Auto Startup\"), mdx(\"p\", null, \"This works great, but if you're running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git\"), \" commands from the command line you'll end up typing in your password a lot.\"), mdx(\"h3\", {\n    \"id\": \"bash\"\n  }, \"Bash\"), mdx(\"p\", null, \"First, ensure that following lines are added to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bash_profile\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"test -f ~/.profile && . ~/.profile\\ntest -f ~/.bashrc && . ~/.bashrc\\n\")), mdx(\"p\", null, \"Now, add the following text to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \", which should be found in your root user home folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Start SSH Agent\\n#----------------------------\\n\\nSSH_ENV=\\\"$HOME/.ssh/environment\\\"\\n\\nfunction run_ssh_env {\\n  . \\\"${SSH_ENV}\\\" > /dev/null\\n}\\n\\nfunction start_ssh_agent {\\n  echo \\\"Initializing new SSH agent...\\\"\\n  ssh-agent | sed 's/^echo/#echo/' > \\\"${SSH_ENV}\\\"\\n  echo \\\"succeeded\\\"\\n  chmod 600 \\\"${SSH_ENV}\\\"\\n\\n  run_ssh_env;\\n\\n  # add your SSH keys here\\n  ssh-add ~/.ssh/id_rsa;\\n}\\n\\nif [ -f \\\"${SSH_ENV}\\\" ]; then\\n  run_ssh_env;\\n  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {\\n    start_ssh_agent;\\n  }\\nelse\\n  start_ssh_agent;\\nfi\\n\")), mdx(\"h3\", {\n    \"id\": \"windows\"\n  }, \"Windows\"), mdx(\"p\", null, \"By default the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sshd\"), \" service is set to start manually. To start it each time the server is rebooted, run the following commands from an elevated PowerShell prompt:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# By default the ssh-agent service is disabled. Allow it to be manually started for the next step to work.\\n# Make sure you're running as an Administrator.\\nGet-Service ssh-agent | Set-Service -StartupType Manual\\n\\n# Start the service\\nStart-Service ssh-agent\\n\\n# This should return a status of Running\\nGet-Service ssh-agent\\n\\n# Now load your key files into ssh-agent\\nssh-add ~\\\\.ssh\\\\id_personal\\nssh-add ~\\\\.ssh\\\\id_work\\n\")), mdx(\"p\", null, \"If you're having problems getting the service running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# check if the service is running\\nGet-Service ssh-agent\\n\\n# check if it has been disabled\\nGet-Service ssh-agent | Select StartType\\n\\n# if it is then set start type to manual\\nGet-Service ssh-agent -Name ssh-agent | Set-Service -StartupType Manual\\n\\n# start the service \\nStart-Service ssh-agent\\n\\n# optionally set it back to automatic\\nGet-Service ssh-agent -Name ssh-agent | Set-Service -StartupType Automatic\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Git","relativePath":"Git.md","fields":{"title":"Git"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git\"\n  }, \"Git\"), mdx(\"p\", null, \"Git tips!\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Changing Commit Authors\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Resetting a forked branch\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git SSH\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git Account Switch\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Home","relativePath":"Home.md","fields":{"title":"Home"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"home\"\n  }, \"Home\"), mdx(\"h3\", {\n    \"id\": \"web\"\n  }, \"Web\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Redux Observable\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Event Listener Handler Map React\"), \"\")), mdx(\"h3\", {\n    \"id\": \"cloud\"\n  }, \"Cloud\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\")), mdx(\"h3\", {\n    \"id\": \"language\"\n  }, \"Language\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"TypeScript\"), \"\")), mdx(\"h3\", {\n    \"id\": \"concepts\"\n  }, \"Concepts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Complexity\"), \"\")), mdx(\"h3\", {\n    \"id\": \"utils\"\n  }, \"Utils\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Java Maps","relativePath":"Java Maps.md","fields":{"title":"Java Maps"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-maps\"\n  }, \"Java Maps\"), mdx(\"p\", null, \"Common implementations: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LinkedHashMap\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TreeMap\")), mdx(\"p\", null, \"An object that maps keys to maps.\"), mdx(\"h2\", {\n    \"id\": \"basic-methods\"\n  }, \"Basic methods\"), mdx(\"h3\", {\n    \"id\": \"putk-key-v-value--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"put(K key, V value) : V\")), mdx(\"p\", null, \"Associates specified key with specified value in this map.\"), mdx(\"h3\", {\n    \"id\": \"getk-key--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"get(K key) : V\")), mdx(\"p\", null, \"Returns the value to which the key is mapped, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if there is no mapping.\"), mdx(\"h3\", {\n    \"id\": \"removek-key--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"remove(K key) : V\")), mdx(\"p\", null, \"Removes the mapping from this map if it is present. Returns the value or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if it wasn't present.\"), mdx(\"h3\", {\n    \"id\": \"removek-key-v-value--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"remove(K key, V value) : boolean\")), mdx(\"p\", null, \"Removes the mapping from this map only if it is mapped to the specified value.\"), mdx(\"h3\", {\n    \"id\": \"replacek-key-v-value--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"replace(K key, V value) : V\")), mdx(\"p\", null, \"Replaces the mapping at the key if it is mapped to some value (including a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" value).\"), mdx(\"p\", null, \"Returns the previously assigned value, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if it does not exist.\"), mdx(\"h3\", {\n    \"id\": \"replacek-key-v-oldvalue-v-newvalue--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"replace(K key, V oldValue, V newValue) : boolean\")), mdx(\"p\", null, \"Replaces the mapping at the key with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newValue\"), \" if it is currently mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"oldValue\"), \".\"), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if the value was replaced.\"), mdx(\"h3\", {\n    \"id\": \"clear--void\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"clear() : void\")), mdx(\"p\", null, \"Removes all mappings from the map.\"), mdx(\"h3\", {\n    \"id\": \"containskeyk-key--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"containsKey(K key) : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if map contains specified key.\"), mdx(\"h3\", {\n    \"id\": \"containsvaluek-value--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"containsValue(K value) : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if map maps one or more keys to the specified value.\"), mdx(\"h3\", {\n    \"id\": \"entryset--setmapentrykv\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"entrySet() : Set<Map.Entry<K,V>>\")), mdx(\"p\", null, \"Returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Set\"), \" of mappings.\"), mdx(\"h3\", {\n    \"id\": \"keyset--setk\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"keySet() : Set<K>\")), mdx(\"p\", null, \"Returns a set of the key values.\"), mdx(\"h3\", {\n    \"id\": \"values--collectionv\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"values() : Collection<V>\")), mdx(\"p\", null, \"Returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Collection\"), \" of the values contained in the map.\"), mdx(\"h3\", {\n    \"id\": \"isempty--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"isEmpty() : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if the map contains no key-value mappings.\"), mdx(\"h2\", {\n    \"id\": \"useful-methods\"\n  }, \"Useful methods\"), mdx(\"h3\", {\n    \"id\": \"getordefaultk-key-v-defaultvalue--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"getOrDefault(K key, V defaultValue) : V\")), mdx(\"p\", null, \"Returns the value to which the key is mapped, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" if there is no mapping.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> freqMap = new HashMap<>();\\n\\n// will place 1 at \\\"a\\\" with zero as a default value\\nfreqMap.put(\\\"a\\\", freqMap.getOrDefault(\\\"a\\\", 0) + 1);\\n\")), mdx(\"h3\", {\n    \"id\": \"computek-key-functionk-key-v-value--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"compute(K key, Function(K key, V value) : V) : V\")), mdx(\"p\", null, \"Computes mapping for specified key and its currently mapped value. If there is no mapping, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"p\", null, \"Returns the computed value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will place 1 at key \\\"a\\\"\\nintMap.compute(\\\"a\\\", (key, value) -> value == null ? 1 : value + 1);\\n\\n// will place 2 at key \\\"a\\\"\\nintMap.compute(\\\"a\\\", (key, value) -> value == null ? 1 : value + 1);\\n\")), mdx(\"h3\", {\n    \"id\": \"computeifabsentk-key-functionk-key--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"computeIfAbsent(K key, Function(K key) : V) : V\")), mdx(\"p\", null, \"If the specified key is not associated with a value (or is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \") it will compute value using mapping function and enter into the map.\"), mdx(\"p\", null, \"Returns the computed value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will place 1 at key \\\"a\\\" and return 1\\nintMap.computeIfAbsent(\\\"a\\\", (key) -> 1);\\n\\n// will not change the value at \\\"a\\\" and return 1\\nintMap.computeIfAbsent(\\\"a\\\", (key) -> 5);\\n\")), mdx(\"h3\", {\n    \"id\": \"computeifpresentk-key-functionk-key-v-value--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"computeIfPresent(K key, Function(K key, V value) : V) : V\")), mdx(\"p\", null, \"If the specified key is present and non-null, it will compute the new value using the mapping function (unless the mapping function returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \").\"), mdx(\"p\", null, \"Returns the computed value;\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will do nothing\\nintMap.computeIfPresent(\\\"a\\\", (key, value) -> 1);\\n\\nintMap.put(\\\"a\\\", 5);\\n\\n// will change value at key \\\"a\\\" to 10 and return 10\\nintMap.computeIfAbsent(\\\"a\\\", (key, value) -> value + 5);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Java Primitives","relativePath":"Java Primitives.md","fields":{"title":"Java Primitives"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-primitives\"\n  }, \"Java Primitives\"), mdx(\"p\", null, \"Sourced from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\"\n  }, \"Orcacle docs\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"byte\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"short\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"int\"), \" and long are \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Two%27s_complement\"\n  }, \"two's compliment\"), \" integers.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"byte\"), \": 8-bit signed  integer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-128\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"127\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful in large arrays when saving memory matters, or for deliberately setting a limit on a value range\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"short\"), \": 16-bit signed two's compliment integer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-32,768\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"32,767\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful in large arrays when saving memory matters, or for deliberately setting a limit on a value range\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"int\"), \": 32-bit signed integer (by default)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-2^31\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^31 -1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can use as unsigned \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^32\"), \" int in Java SE 8+\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"long\"), \": 64-bit signed integer (by default)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-2^63\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^63 -1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can use as unsigned \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^64\"), \" long in Java SE 8+\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"only use if you're going to use numbers larger range of int\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"float\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\"\n  }, \"single-precision\"), \" 32-bit floating point\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use if you need to save memory in a large array, otherwise use double\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"should \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"never\"), \" be used for precise values such as currency, use BigDecimal instead\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"double\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\n  }, \"double-precision\"), \" 64-bit floating point\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"generally the default choice for decimal values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"should \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"never\"), \" be used for precise values such as currency, use BigDecimal instead\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"boolean\"), \": two possible values: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"char\"), \": single 16-bit Unicode character\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\u0000\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \") and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\uffff\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"65,535\"), \" inclusive)\")))), mdx(\"p\", null, \"In addition to the 8 primitives above, Java also provides special support for character strings via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.lang.String\"), \" class. Enclosing a string in double quotes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" will automatically create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" object, whereas single quotes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'\"), \" create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"char\"), \" type. A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"immutable\"), \".\"), mdx(\"h2\", {\n    \"id\": \"default-values\"\n  }, \"Default values\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Data Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default value\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"byte\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"short\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"long\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0L\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"float\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0.0f\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"double\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0.0d\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"char\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\\u0000\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String (or any object)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))))), mdx(\"h2\", {\n    \"id\": \"character-and-string-literals\"\n  }, \"Character and String Literals\"), mdx(\"p\", null, \"May contain any Unicode characters. Always \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"char\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" types.\"), mdx(\"p\", null, \"The Java programming language also supports a few special escape sequences for char and String literals: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\b\"), \" (backspace), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\t\"), \" (tab), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \" (line feed), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\f\"), \" (form feed), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\r\"), \" (carriage return), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\\\\"\"), \" (double quote), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\'\"), \" (single quote), and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\\\\\\"), \" (backslash).\"), mdx(\"p\", null, \"Also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" literal, which can be used as a value for any reference type. \"), mdx(\"p\", null, \"Also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class\"), \" literal, which is formed by taking a type name and appending \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".class\"), \", for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String.class\"), \" refers to the object that represents the type.\"), mdx(\"h2\", {\n    \"id\": \"integer-literals\"\n  }, \"Integer Literals\"), mdx(\"p\", null, \"An integer literal is of type long if it ends with the letter L or l; otherwise it is of type int. It is recommended that you use the upper case letter L because the lower case letter l is hard to distinguish from the digit 1.\"), mdx(\"p\", null, \"Values of the integral types byte, short, int, and long can be created from int literals. Values of type long that exceed the range of int can be created from long literals. Integer literals can be expressed by these number systems:\"), mdx(\"p\", null, \"Decimal: Base 10, whose digits consists of the numbers 0 through 9; this is the number system you use every day\\nHexadecimal: Base 16, whose digits consist of the numbers 0 through 9 and the letters A through F\\nBinary: Base 2, whose digits consists of the numbers 0 and 1 (you can create binary literals in Java SE 7 and later)\\nFor general-purpose programming, the decimal system is likely to be the only number system you'll ever use. However, if you need to use another number system, the following example shows the correct syntax. The prefix 0x indicates hexadecimal and 0b indicates binary:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// The number 26, in decimal\\nint decVal = 26;\\n//  The number 26, in hexadecimal\\nint hexVal = 0x1a;\\n// The number 26, in binary\\nint binVal = 0b11010;\\n\")), mdx(\"h2\", {\n    \"id\": \"floating-point-literals\"\n  }, \"Floating-Point Literals\"), mdx(\"p\", null, \"A floating-point literal is of type float if it ends with the letter F or f; otherwise its type is double and it can optionally end with the letter D or d.\"), mdx(\"p\", null, \"The floating point types (float and double) can also be expressed using E or e (for scientific notation), F or f (32-bit float literal) and D or d (64-bit double literal; this is the default and by convention is omitted).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"double d1 = 123.4;\\n// same value as d1, but in scientific notation\\ndouble d2 = 1.234e2;\\nfloat f1  = 123.4f;\\n\")), mdx(\"h2\", {\n    \"id\": \"underscore-characters\"\n  }, \"Underscore Characters\"), mdx(\"p\", null, \"In Java SE 7+ you can use any number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" characters between digits to improve readability:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"long creditCardNumber = 1234_5678_9012_3456L;\\nlong socialSecurityNumber = 999_99_9999L;\\nfloat pi =  3.14_15F;\\nlong hexBytes = 0xFF_EC_DE_5E;\\nlong hexWords = 0xCAFE_BABE;\\nlong maxLong = 0x7fff_ffff_ffff_ffffL;\\nbyte nybbles = 0b0010_0101;\\nlong bytes = 0b11010010_01101001_10010100_10010010;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Java String","relativePath":"Java String.md","fields":{"title":"Java String"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-string\"\n  }, \"Java String\"), mdx(\"p\", null, \"Is not a primitive type, but is sometimes treated as such in Java as the language provides some special support out of the box. Strings can be created using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" around characters.\"), mdx(\"p\", null, \"Strings are constant - their value cannot be changed after they are created.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String str = \\\"abc\\\";\\n\")), mdx(\"p\", null, \"is equivalent to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"char data[] = {'a', 'b', 'c'};\\nString str = new String(data);\\n\")), mdx(\"p\", null, \"Here are some more examples of how strings can be used:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"System.out.println(\\\"abc\\\");\\nString cde = \\\"cde\\\";\\nSystem.out.println(\\\"abc\\\" + cde);\\nString c = \\\"abc\\\".substring(2,3);\\n\")), mdx(\"h2\", {\n    \"id\": \"useful-methods\"\n  }, \"Useful methods\"), mdx(\"h3\", {\n    \"id\": \"indexof\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"indexOf\")), mdx(\"p\", null, \"Multiple versions of this method, but can be useful for code wars style questions when working with strings.\"), mdx(\"p\", null, \"Both of these methods also allow you to supply a second argument \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int fromIndex\"), \" to specify the start point of the search.\"), mdx(\"h4\", {\n    \"id\": \"indexofstring-str--int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"indexOf(String str) : int\")), mdx(\"p\", null, \"Returns the index of the substring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"str\"), \" within the string.\"), mdx(\"h4\", {\n    \"id\": \"indexofint-ch--int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"indexOf(int ch) : int\")), mdx(\"p\", null, \"Returns the index of the first occurrence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ch\"), \" in the String, returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" if it doesn't exist. \"), mdx(\"h3\", {\n    \"id\": \"lastindexof\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"lastIndexOf\")), mdx(\"p\", null, \"Similarly to the method above, but returns the last index of a substring or character within a string. This is useful when you want to check if a substring / character only appears in the string once:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"boolean appearsOnce(String str, char ch) {\\n    return str.indexOf(ch) == str.lastIndexOf(ch);\\n}\\n\")), mdx(\"p\", null, \"Can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int fromIndex\"), \" to specify a certain index to search from.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Java","relativePath":"Java.md","fields":{"title":"Java"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java\"\n  }, \"Java\"), mdx(\"p\", null, \"A place for all things Java.\"), mdx(\"h2\", {\n    \"id\": \"core\"\n  }, \"Core\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java Primitives\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java String\"), \"\")), mdx(\"h2\", {\n    \"id\": \"data-structures\"\n  }, \"Data Structures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java Maps\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Redux Observable fetch","relativePath":"Redux Observable fetch.md","fields":{"title":"Redux Observable fetch"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable-fetch\"\n  }, \"Redux Observable fetch\"), mdx(\"p\", null, \"As an alternative to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax\"), \" methods provided by \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Redux Observable\"), \", you can use the more familiar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \"\\nimplementation called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fromFetch\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const data$ = fromFetch('https://api.github.com/users?per_page=5').pipe(\\n  switchMap(response => {\\n    if (response.ok) {\\n      // OK return data\\n      return response.json();\\n    } else {\\n      // Server is returning a status requiring the client to try something else.\\n      return of({ error: true, message: `Error ${response.status}` });\\n    }\\n  }),\\n  catchError(err => {\\n    // Network or other error, handle appropriately\\n    console.error(err);\\n    return of({ error: true, message: err.message })\\n  })\\n);\\n\")), mdx(\"p\", null, \"You could use this inside an epic:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const getDataEpic: Epic = (action$) =>\\n  action$.pipe(\\n    ofType(ActionType.GET_DATA),\\n    // switch map will cancel last request if it is pending\\n    // use mergeMap if you'd like all requests of this data type to continue\\n    switchMap(({ url }) => fromFetch(url)),\\n    map((response) => {\\n      if (response.ok) {\\n        return [of(response.json()).pipe(\\n          // we use a mergeMap here to resolve the .json() promise\\n          mergeMap(json => json),\\n          map(data => ({ type: ActionType.DATA_RECEIVED, data }))\\n        )];\\n      } else {\\n        return of({ error: true, message: `Error ${response.status}` });\\n      }\\n    })\\n  );\\n\")), mdx(\"p\", null, \"Alternatively, you could create a wrapper that handles some of this logic for you:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// This is the response shape from the API\\ntype ApiResponse<Data> = {\\n  docs: Data;\\n  limit: number;\\n  offset: number;\\n  page: number;\\n  pages: number;\\n  total: number;\\n};\\n\\n// The response uses _id instead of id\\ntype ApiData<Type> = Type & { _id: string };\\n\\nexport const fetch =\\n  <Data>(\\n    url: string,\\n    mapResponse: (value: ApiResponse<Data>) => Action,\\n    options: RequestInit = {}\\n  ) =>\\n    (): Observable<Action> =>\\n      fromFetch(url, {\\n        ...options,\\n        headers: {\\n          ...options.headers,\\n          ...createAuthHeader(),\\n        },\\n      }).pipe(\\n        switchMap((res) => {\\n          if (res.ok) {\\n            return of(res.json()).pipe(\\n              mergeMap((json) => json),\\n              map(mapResponse)\\n            );\\n          }\\n          return [{ type: \\\"SERVER_FETCH_ERROR\\\", message: res.statusText }];\\n        }),\\n        catchError((err) => {\\n          console.error(err);\\n          return [{ type: \\\"FETCH_ERROR\\\", message: err.message }];\\n        })\\n      );\\n\\n// usage\\nexport const getCharacterList = fetch<ApiData<Character>[]>(\\n  `${BASE_URL}/character`,\\n  ({ docs }) => setCharactersAction(dataMapper(docs))\\n);\\n\\n// Epic usage\\nexport const getCharactersEpic: Epic = (action$) =>\\n  action$.pipe(\\n    ofType(CharacterActionType.GET_CHARACTERS),\\n    // this will either output a setCharactersAction or a FETCH_ERROR/SERVER_FETCH_ERROR action\\n    switchMap(() => getCharactersFetch()),\\n  );\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Resetting a forked branch","relativePath":"Resetting a forked branch.md","fields":{"title":"Resetting a forked branch"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"resetting-a-forked-branch\"\n  }, \"Resetting a forked branch\"), mdx(\"p\", null, \"#git \"), mdx(\"p\", null, \"Forked a branch and finished merging and want yours to look like the original branch? Look no further!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git remote add upstream /url/to/original/repo\\ngit fetch upstream\\ngit checkout master\\ngit reset --hard upstream/master  \\ngit push origin master --force \\n\")), mdx(\"p\", null, \"If you want to preserve your commits:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git remote add upstream /url/to/original/repo\\ngit fetch upstream\\ngit checkout master\\ngit rebase upstream/master  \\ngit push origin master --force\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Space Complexity","relativePath":"Space Complexity.md","fields":{"title":"Space Complexity"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"space-complexity\"\n  }, \"Space Complexity\"), mdx(\"p\", null, \"See also: \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Time Complexity\"), \"\"), mdx(\"p\", null, \"Similarly to time complexity, space complexity describes the amount of memory space required by an algorithm to solve a given problem.\"), mdx(\"h2\", {\n    \"id\": \"constant-space\"\n  }, \"Constant space\"), mdx(\"p\", null, \"A constant space ( \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(1)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" ) algorithm uses the same amount of memory no matter what the input size is.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sum (int a, int b)\\n    return a + b;\\n\")), mdx(\"p\", null, \"In this example, three variables are used and allocated in memory (3 int values). Therefore, this algorithm will take 12 bytes of memory to complete. No matter what inputs are used, this will always be the case, hence a constant space is used.\"), mdx(\"h2\", {\n    \"id\": \"linear-space\"\n  }, \"Linear space\"), mdx(\"p\", null, \"Linear space ( \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" ) algorithms use a linear amount of memory in relation to the input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sumArray (int[] arr)\\n    int size = array.length;\\n    int sum = 0;\\n\\n    for (int i = 0; i < size; i++) do\\n        sum += array[i];\\n    \\n    return sum;\\n\")), mdx(\"p\", null, \"In this example we have 4 variables:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"arr\"), \": an array - \", mdx(\"span\", {\n    parentName: \"li\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"4\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2217\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"4 * n\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.64444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"4\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2217\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.43056em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"))))), \" bytes, where \", mdx(\"span\", {\n    parentName: \"li\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"n\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.43056em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"))))), \" is the length of the array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"size\"), \": int - 4 bytes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"sum\"), \": int - 4 bytes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"iterator\"), \": int - 4 bytes\")), mdx(\"p\", null, \"This gives us a total of \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"4\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"4\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"4\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"4\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"4n + 4 + 4 + 4\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.72777em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"4\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.72777em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"4\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.72777em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"4\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.64444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"4\"))))), \" . This therefore gives us the value \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" . \"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Time Complexity","relativePath":"Time Complexity.md","fields":{"title":"Time Complexity"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"time-complexity\"\n  }, \"Time Complexity\"), mdx(\"p\", null, \"See also: \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Space Complexity\"), \"\"), mdx(\"p\", null, \"Describes the amount of computer time it takes to run an algorithm. It is usually estimated by counting the number of elementary operations performed.\"), mdx(\"p\", null, \"Since an algorithms running time may different depending on a certain input, you'd usually consider the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"worst-case\"), \" time complexity i.e the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"maximum\"), \" amount of time. Another option is to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"average-case\"), \" complexity.\"), mdx(\"p\", null, \"Commonly expressed in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"big O notation\"), \": \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \", \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"log\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2061\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n \\\\log n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mop\"\n  }, \"lo\", mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"marginRight\": \"0.01389em\"\n    }\n  }, \"g\")), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \", \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\"), mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"a\")), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n ^a)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"msupsub\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-t\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-r\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.664392em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal mtight\"\n  }, \"a\")))))))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \", \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\"), mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\")), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(2^n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"2\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"msupsub\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-t\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-r\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.664392em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal mtight\"\n  }, \"n\")))))))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \", etc...\"), mdx(\"p\", null, \"Complexities are classified according to the big O notation, for example an algorithm with time complexity is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"linear time algorithm\"), \".\"), mdx(\"h2\", {\n    \"id\": \"constant-time\"\n  }, \"Constant time\"), mdx(\"p\", null, \"An algorithm is constant time (\", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(1)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \") if the computer time does not depend on the size of the input. For example, accessing a single element in an array takes constant time as only one operation is performed to locate it. Similarly, finding the smallest value in a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sorted\"), \" array also takes \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" time as we know it is the first element.\"), mdx(\"p\", null, \"Despite being called constant time, the time doesn't have to be completely independent of problem size - but the upper bound running time has to be bounded independently of the problem size.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"int index = 5;\\nint item = list[index];\\nif (condition true) then\\n    perform some operation that runs in constant time\\nelse\\n    perform some other operation that runs in constant time\\nfor i = 1 to 100\\n    for j = 1 to 200\\n        perform some operation that runs in constant time\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://en.wikipedia.org/wiki/Time_complexity\"\n  }, \"Source\"))), mdx(\"h2\", {\n    \"id\": \"logarithmic-time\"\n  }, \"Logarithmic time\"), mdx(\"p\", null, \"An algorithm takes logarithmic time when its big O notation is \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"log\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2061\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(\\\\log n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mop\"\n  }, \"lo\", mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"marginRight\": \"0.01389em\"\n    }\n  }, \"g\")), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \". Algorithms that take logarithmic time are considered to be highly efficient as the ratio of operations to the size of input decreases as \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"n\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.43056em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"))))), \" increases.\"), mdx(\"p\", null, \"Examples of logarithmic algorithms are often found in operations on binary tress or when using binary search, since these algorithms do not need to access all elements in order to finish.\"), mdx(\"p\", null, \"For example, a search for a number in a sorted list of numbers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"int searchNumber = 50;\\nboolean found = false;\\nint index = Math.floor(list.length / 2);\\n\\nwhile (not found) then\\n    int nextIndex;\\n    if (list[index] equals searchNumber) then\\n        found = true\\n    else if (list[index] is greater than searchNumber) then\\n        nextIndex = Math.floor(index / 2)\\n    else if (list[index] is less than searchNumber) then\\n        nextIndex = index + Math.floor(index / 2);\\n    \\n    if (nextIndex equals index) then\\n        was not found\\n\\nif (found) then\\n    return index\\n\")), mdx(\"h2\", {\n    \"id\": \"quadratic-time\"\n  }, \"Quadratic time\"), mdx(\"p\", null, \"A quadratic algorithm has a big O notation of \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\"), mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\")), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n^2)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.064108em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"msupsub\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-t\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-r\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.8141079999999999em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mtight\"\n  }, \"2\")))))))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \". Simple comparison based sorting algorithms are quadratic (e.g. insertion sort).\"), mdx(\"p\", null, \"An example of searching for duplicate names in a string array:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"for (i = 0; i < input length; i++) do\\n    String name = input[i];\\n\\n    for (j = i + 1; j < input.length; j++) do\\n        if (name equals input[j]) then\\n            return true;\\n\\nreturn false;\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"There are \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"n-1\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.66666em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2212\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.64444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"))))), \" iterations of the outer loop. On each iteration, the inner loop iterates \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"i\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"n-i-1\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.66666em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2212\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.74285em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"i\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2212\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.64444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"))))), \" times. So in total the inner loop iterates \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mi\", {\n    parentName: \"mrow\",\n    \"mathvariant\": \"normal\"\n  }, \".\"), mdx(\"mi\", {\n    parentName: \"mrow\",\n    \"mathvariant\": \"normal\"\n  }, \".\"), mdx(\"mi\", {\n    parentName: \"mrow\",\n    \"mathvariant\": \"normal\"\n  }, \".\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"+\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"n-1 + n-2 + ... + 1\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.66666em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2212\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.72777em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.66666em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2212\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.72777em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"2\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.66666em\",\n      \"verticalAlign\": \"-0.08333em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.64444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"))))), \" times. So the number of times that \", \"[the inner function]\", \" executes is equal to the sum of the numbers from 1 to n-1. That sum is \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2217\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2212\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"1\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\"), mdx(\"mi\", {\n    parentName: \"mrow\",\n    \"mathvariant\": \"normal\"\n  }, \"/\"), mdx(\"mn\", {\n    parentName: \"mrow\"\n  }, \"2\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"n*(n-1)/2\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.46528em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2217\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mbin\"\n  }, \"\\u2212\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2222222222222222em\"\n    }\n  })), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"/\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"2\"))))), \" , which is in \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"T\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\"), mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\")), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"T(n^2)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.064108em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.13889em\"\n    }\n  }, \"T\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"msupsub\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-t\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-r\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.8141079999999999em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mtight\"\n  }, \"2\")))))))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" and thus also in \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\"), mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\")), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(n^2)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.064108em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\"\n  }, \"n\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"msupsub\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-t\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-r\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.8141079999999999em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mtight\"\n  }, \"2\")))))))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" .\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/18459727/big-o-time-complexity-for-nested-j-i-1-loop\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Source\")))), mdx(\"h2\", {\n    \"id\": \"exponential-time\"\n  }, \"Exponential time\"), mdx(\"p\", null, \"An example of an algorithm that has a big O of \", mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\"), mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\")), mdx(\"mo\", {\n    parentName: \"mrow\",\n    \"stretchy\": \"false\"\n  }, \")\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"O(2^n)\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }, \"O\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mopen\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord\"\n  }, \"2\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"msupsub\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-t\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist-r\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.664392em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal mtight\"\n  }, \"n\")))))))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mclose\"\n  }, \")\"))))), \" is a recursive Fibonacci function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"fibbonaci(int x)\\n    if (x is less than or equal to 1) then\\n        return 0;\\n    if (x equals 2) then\\n        return 1;\\n    \\n    return fibbonacci(x - 1) + fibbonacci(x - 2);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"TypeScript","relativePath":"TypeScript.md","fields":{"title":"TypeScript"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Event Listener Handler Map React\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Redux Observable Ajax Default Header Hack\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Union Array to Array Union\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Union Array to Array Union","relativePath":"Union Array to Array Union.md","fields":{"title":"Union Array to Array Union"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"union-array-to-array-union\"\n  }, \"Union Array to Array Union\"), mdx(\"p\", null, \"I didn't come up with this one, but it was used on a project and was useful at some point.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type A = string[] | number[] | object[]\\ntype Unioniser<T extends Array<unknown>> = T[number][];\\ntype B = Unioniser<A>\\n// type B = (string | number | object)[]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Custom Operators","relativePath":"Redux Observable/Custom Operators.md","fields":{"title":"Custom Operators"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"custom-operators\"\n  }, \"Custom Operators\"), mdx(\"p\", null, \"Using custom operators in Epics can help to make them more readable, as well as helping with types.\"), mdx(\"p\", null, \"For example, here's an Epic that gets some data and filters it by a given predicate:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type ReturnType = (string | number)[];\\n\\nconst isNumberReturn = (value: ReturnType): value is number[] =>\\n  value.some(v => !(typeof v !== 'number'));\\n\\nconst getDataEpic: Epic = (action$, state$) =>\\n  action$.pipe(\\n    ofType(ActionTypes.GET_DATA),\\n    fetchData('https://some-url.com/v2/endpoint'),\\n    filter(isNumberReturn),\\n    // at this point we know it's a number due to type guard\\n    map((numbers) => {\\n      return {\\n        type: ActionTypes.GET_DATA_SUCCESS,\\n        payload: numbers,\\n      };\\n    }),\\n  )\\n\")), mdx(\"p\", null, \"This is a simple example, but often you may have a chain of filters and maps applied to something.\"), mdx(\"p\", null, \"What if we wanted to filter by numbers, perform some calculation on the numbers, and add them together and return that\\nvalue? If we did this a lot, we'd have to write a lot of code to do this.\"), mdx(\"p\", null, \"Here's an example of how we can use custom operators to make this more readable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { Observable } from \\\"rxjs\\\"\\n\\ntype ReturnType = (string | number)[];\\n\\nconst isNumberReturn = (value: ReturnType): value is number[] =>\\n  value.some(v => !(typeof v !== 'number'));\\n\\nconst mapThenSum = (mapper: (number) => number) => (source: Observable<ReturnType>): Observable<number> =>\\n  source.pipe(\\n    filter(isNumberReturn),\\n    map(mapper),\\n    map((numbers) => numbers.reduce((a, b) => a + b, 0)),\\n  );\\n\\n// use in epic\\nconst getDataEpic: Epic = (action$, state$) =>\\n  action$.pipe(\\n    ofType(ActionTypes.GET_DATA),\\n    fetchData('https://some-url.com/v2/endpoint'),\\n    mapThenSum((n) => n * 2),\\n    map((total) => {\\n      return {\\n        type: ActionTypes.GET_DATA_SUCCESS,\\n        payload: total,\\n      };\\n    }),\\n  )\\n\")), mdx(\"p\", null, \"When used properly it helps make the code more testable and readable, as some Epics can be very long and complex.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Redux Observable Ajax Default Header Hack","relativePath":"Redux Observable/Redux Observable Ajax Default Header Hack.md","fields":{"title":"Redux Observable Ajax Default Header Hack"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable-ajax-default-header-hack\"\n  }, \"Redux Observable Ajax Default Header Hack\"), mdx(\"p\", null, \"Ever wanted to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax.get()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax.post()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax.put()\"), \" and the rest without having to set the authorization header every time? Welcome to the future!\"), mdx(\"p\", null, \"This is an annoying problem since the parameters for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getJSON\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" are not the same as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"patch\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"put\"), \".\"), mdx(\"p\", null, \"In the example below a Proxy is used to take the ajax method and then grab the position of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \" object. The object then has a the token added to it, and is then called with the modified arguments.\"), mdx(\"p\", null, \"This is working with TS 4.5.4, however I did sneak an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"any\"), \" in... would love to get rid of that if anyone has any suggestions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { ajax as Ajax } from 'rxjs/ajax';\\nimport { Observable } from 'rxjs';\\n\\n// a proxy for the default ajax function\\n// adapted from https://stackoverflow.com/questions/45778994/rxjs-how-to-set-default-request-headers\\n\\nexport type AuthenticatedRequest<ResponseType> = (\\n  ajax: typeof Ajax\\n) => Observable<ResponseType>;\\n\\nconst createAuthorizationHeader = (token: string) => ({\\n  Authorization: `Bearer ${token}`,\\n});\\n\\nconst getHeadersPos = (ajaxMethod: string): number => {\\n  switch (ajaxMethod) {\\n    case 'get':\\n    case 'getJSON':\\n    case 'delete':\\n      return 1;\\n    case 'patch':\\n    case 'post':\\n    case 'put':\\n      return 2;\\n    default:\\n      return -1;\\n  }\\n};\\n\\nconst ajaxProxy =\\n  (token: string, ajaxCreationMethod: typeof Ajax) => {\\n    return new Proxy(ajaxCreationMethod, {\\n      get(ajax, requestType: keyof typeof Ajax) {\\n        const ajaxMethod = ajax[requestType];\\n        const headersPos = getHeadersPos(requestType);\\n\\n        if (headersPos === -1 || typeof ajaxMethod !== 'function') {\\n          return ajaxMethod;\\n        }\\n\\n        return (...args: Parameters<typeof ajaxMethod>) => {\\n          args[headersPos] = {\\n            ...args[headersPos] as Record<string, string>,\\n            ...createAuthorizationHeader(token),\\n          };\\n\\n          return ajaxMethod.apply(this, args as any);\\n        };\\n      },\\n    });\\n  };\\n\\nexport const ajax = (token: string) => ajaxProxy(token, Ajax);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Redux Observable Ajax","relativePath":"Redux Observable/Redux Observable Ajax.md","fields":{"title":"Redux Observable Ajax"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable-ajax\"\n  }, \"Redux Observable Ajax\"), mdx(\"p\", null, \"#react #redux-observable #rxjs \"), mdx(\"p\", null, \"If you're using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redux-observable\"), \" you may want to use it's built in methods for sending HTTP requests asyncronously.\"), mdx(\"p\", null, \"If you want a more familiar HTTP interface, see \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Redux Observable fetch\"), \".\"), mdx(\"p\", null, \"I'm using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://the-one-api.dev/\"\n  }, \"The One API\"), \" for my data. I have a mapper function which switches from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// api.ts\\n\\nimport { Observable } from \\\"rxjs\\\";\\nimport { Character } from \\\"../../types\\\";\\nimport { ajax } from \\\"rxjs/ajax\\\";\\nimport { map } from \\\"rxjs/operators\\\";\\nimport dataMapper from \\\"./dataMapper\\\";\\n\\nconst BASE_URL = \\\"https://the-one-api.dev/v2\\\";\\n\\nconst createAuthHeader = () => ({\\n  Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\\n});\\n\\ntype ApiResponse<Data> = {\\n  docs: Data;\\n  limit: number;\\n  offset: number;\\n  page: number;\\n  pages: number;\\n  total: number;\\n};\\n\\ntype ApiData<Type> = Type & { _id: string };\\n\\nexport const getCharacters = (): Observable<Character[]> =>\\n  ajax\\n    .get<ApiResponse<ApiData<Character>[]>>(`${BASE_URL}/character`, {\\n      ...createAuthHeader(),\\n    })\\n    .pipe(\\n      map((res) => res.response.docs),\\n      map(dataMapper)\\n    );\\n\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note:\")), \" * see \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Redux Observable Ajax Default Header Hack\"), \" for setting the authorization token for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax\"), \" methods.\"), mdx(\"p\", null, \"Here's the data mapper:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const dataMapper = <Data extends { _id: string }>(data: Data[]) =>\\n  data.map((item) => ({\\n    ...item,\\n    id: item._id,\\n  }));\\n\\nexport default dataMapper;\\n\")), mdx(\"p\", null, \"We can then consume \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getCharacters\"), \" in an Epic:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"export const getCharactersEpic: Epic = (action$) =>\\n  action$.pipe(\\n    ofType(CharacterActionType.GET_CHARACTERS),\\n    switchMap(getCharacters),\\n    // this is plain redux action which takes an array of Characters\\n    map(setCharactersAction)\\n  );\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Redux Observable Setup","relativePath":"Redux Observable/Redux Observable Setup.md","fields":{"title":"Redux Observable Setup"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable-setup\"\n  }, \"Redux Observable Setup\"), mdx(\"p\", null, \"#rxjs #redux-observable #react\"), mdx(\"p\", null, \"When setting up \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://redux-observable.js.org\"\n  }, \"Redux Observable\"), \", it's really important to get the global error handler. I often forget to do this, and it means that if an error from an epic bubbles up to the root epic, the entire stream terminates.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This isn't good!\")), mdx(\"p\", null, \"If you're expecting errors to be thrown, it's good practice to catch and handle / log them when they occur, but errors can happen that you don't expect. The documentation recommends setting up a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"global error handler\"), \" when setting up the middleware. It's right there in the docs, why do I always forget?!\"), mdx(\"p\", null, \"Here's what you need to add to your root epic:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const rootEpic = (action$, store$, dependencies) =>\\n  combineEpics(...epics)(action$, store$, dependencies).pipe(\\n    catchError((error, source) => {\\n      console.error(error);\\n      return source;\\n    })\\n  );\\n\")), mdx(\"p\", null, \"Along with this, you'll also want the following in your root store:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const epicMiddleware = createEpicMiddleware();\\n\\nconst store = createStore(\\n  rootReducer,\\n  applyMiddleware(epicMiddleware)\\n);\\n\\nepicMiddleware.run(rootEpic);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"Redux Observable","relativePath":"Redux Observable/Redux Observable.md","fields":{"title":"Redux Observable"},"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable\"\n  }, \"Redux Observable\"), mdx(\"p\", null, \"All things observable!\"), mdx(\"h2\", {\n    \"id\": \"foamlinkredux-observable-setupfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Redux Observable Setup\"), \"\"), mdx(\"p\", null, \"Some setup notes for Redux Observable\"), mdx(\"h2\", {\n    \"id\": \"foamlinkredux-observable-ajaxfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Redux Observable Ajax\"), \"\"), mdx(\"p\", null, \"Some info on using the provided Ajax functions for HTTP requests.\"), mdx(\"h2\", {\n    \"id\": \"foamlinkredux-observable-ajax-default-header-hackfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Redux Observable Ajax Default Header Hack\"), \"\"), mdx(\"p\", null, \"A nice hack for inserting a token into the header of all Ajax HTTP requests\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}]}}}