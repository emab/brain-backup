{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Redux Observable/Custom Operators",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"custom-operators\"\n  }, \"Custom Operators\"), mdx(\"p\", null, \"Using custom operators in Epics can help to make them more readable, as well as helping with types.\"), mdx(\"p\", null, \"For example, here's an Epic that gets some data and filters it by a given predicate:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type ReturnType = (string | number)[];\\n\\nconst isNumberReturn = (value: ReturnType): value is number[] =>\\n  value.some(v => !(typeof v !== 'number'));\\n\\nconst getDataEpic: Epic = (action$, state$) =>\\n  action$.pipe(\\n    ofType(ActionTypes.GET_DATA),\\n    fetchData('https://some-url.com/v2/endpoint'),\\n    filter(isNumberReturn),\\n    // at this point we know it's a number due to type guard\\n    map((numbers) => {\\n      return {\\n        type: ActionTypes.GET_DATA_SUCCESS,\\n        payload: numbers,\\n      };\\n    }),\\n  )\\n\")), mdx(\"p\", null, \"This is a simple example, but often you may have a chain of filters and maps applied to something.\"), mdx(\"p\", null, \"What if we wanted to filter by numbers, perform some calculation on the numbers, and add them together and return that\\nvalue? If we did this a lot, we'd have to write a lot of code to do this.\"), mdx(\"p\", null, \"Here's an example of how we can use custom operators to make this more readable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { Observable } from \\\"rxjs\\\"\\n\\ntype ReturnType = (string | number)[];\\n\\nconst isNumberReturn = (value: ReturnType): value is number[] =>\\n  value.some(v => !(typeof v !== 'number'));\\n\\nconst mapThenSum = (mapper: (number) => number) => (source: Observable<ReturnType>): Observable<number> =>\\n  source.pipe(\\n    filter(isNumberReturn),\\n    map(mapper),\\n    map((numbers) => numbers.reduce((a, b) => a + b, 0)),\\n  );\\n\\n// use in epic\\nconst getDataEpic: Epic = (action$, state$) =>\\n  action$.pipe(\\n    ofType(ActionTypes.GET_DATA),\\n    fetchData('https://some-url.com/v2/endpoint'),\\n    mapThenSum((n) => n * 2),\\n    map((total) => {\\n      return {\\n        type: ActionTypes.GET_DATA_SUCCESS,\\n        payload: total,\\n      };\\n    }),\\n  )\\n\")), mdx(\"p\", null, \"When used properly it helps make the code more testable and readable, as some Epics can be very long and complex.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Custom Operators"}],"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/Redux Observable/Custom Operators","title":"Custom Operators"}}},"pageContext":{"id":"2248517c-c7de-5413-af30-e4e8fa9bd422"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}