{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Redux Observable/Custom Operators",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"custom-operators\"\n  }, \"Custom Operators\"), mdx(\"p\", null, \"Using custom operators in Epics can help to make them more readable, as well as helping with types.\"), mdx(\"p\", null, \"For example, here's an Epic that gets some data and filters it by a given predicate:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type ReturnType = (string | number)[];\\n\\nconst isNumberReturn = (value: ReturnType): value is number[] =>\\n  value.some(v => !(typeof v !== 'number'));\\n\\nconst getDataEpic: Epic = (action$, state$) =>\\n  action$.pipe(\\n    ofType(ActionTypes.GET_DATA),\\n    fetchData('https://some-url.com/v2/endpoint'),\\n    filter(isNumberReturn),\\n    // at this point we know it's a number due to type guard\\n    map((numbers) => {\\n      return {\\n        type: ActionTypes.GET_DATA_SUCCESS,\\n        payload: numbers,\\n      };\\n    }),\\n  )\\n\")), mdx(\"p\", null, \"This is a simple example, but often you may have a chain of filters and maps applied to something.\"), mdx(\"p\", null, \"What if we wanted to filter by numbers, perform some calculation on the numbers, and add them together and return that\\nvalue? If we did this a lot, we'd have to write a lot of code to do this.\"), mdx(\"p\", null, \"Here's an example of how we can use custom operators to make this more readable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { Observable } from \\\"rxjs\\\"\\n\\ntype ReturnType = (string | number)[];\\n\\nconst isNumberReturn = (value: ReturnType): value is number[] =>\\n  value.some(v => !(typeof v !== 'number'));\\n\\nconst mapThenSum = (mapper: (number) => number) => (source: Observable<ReturnType>): Observable<number> =>\\n  source.pipe(\\n    filter(isNumberReturn),\\n    map(mapper),\\n    map((numbers) => numbers.reduce((a, b) => a + b, 0)),\\n  );\\n\\n// use in epic\\nconst getDataEpic: Epic = (action$, state$) =>\\n  action$.pipe(\\n    ofType(ActionTypes.GET_DATA),\\n    fetchData('https://some-url.com/v2/endpoint'),\\n    mapThenSum((n) => n * 2),\\n    map((total) => {\\n      return {\\n        type: ActionTypes.GET_DATA_SUCCESS,\\n        payload: total,\\n      };\\n    }),\\n  )\\n\")), mdx(\"p\", null, \"When used properly it helps make the code more testable and readable, as some Epics can be very long and complex.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Custom Operators"}],"outboundReferences":[],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable-ajax-default-header-hack\"\n  }, \"Redux Observable Ajax Default Header Hack\"), mdx(\"p\", null, \"Ever wanted to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax.get()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax.post()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ajax.put()\"), \" and the rest without having to set the authorization header every time? Welcome to the future!\"), mdx(\"p\", null, \"This is an annoying problem since the parameters for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getJSON\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" are not the same as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"patch\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"put\"), \".\"), mdx(\"p\", null, \"In the example below a Proxy is used to take the ajax method and then grab the position of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \" object. The object then has a the token added to it, and is then called with the modified arguments.\"), mdx(\"p\", null, \"This is working with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TS 4.5.4\"), \", however I did sneak an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"any\"), \" in... would love to get rid of that if anyone has any suggestions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { ajax as Ajax } from 'rxjs/ajax';\\nimport { Observable } from 'rxjs';\\n\\n// a proxy for the default ajax function\\n// adapted from https://stackoverflow.com/questions/45778994/rxjs-how-to-set-default-request-headers\\n\\nexport type AuthenticatedRequest<ResponseType> = (\\n  ajax: typeof Ajax\\n) => Observable<ResponseType>;\\n\\nconst createAuthorizationHeader = (token: string) => ({\\n  Authorization: `Bearer ${token}`,\\n});\\n\\nconst getHeadersPos = (ajaxMethod: string): number => {\\n  switch (ajaxMethod) {\\n    case 'get':\\n    case 'getJSON':\\n    case 'delete':\\n      return 1;\\n    case 'patch':\\n    case 'post':\\n    case 'put':\\n      return 2;\\n    default:\\n      return -1;\\n  }\\n};\\n\\nconst ajaxProxy =\\n  (token: string, ajaxCreationMethod: typeof Ajax) => {\\n    return new Proxy(ajaxCreationMethod, {\\n      get(ajax, requestType: keyof typeof Ajax) {\\n        const ajaxMethod = ajax[requestType];\\n        const headersPos = getHeadersPos(requestType);\\n\\n        if (headersPos === -1 || typeof ajaxMethod !== 'function') {\\n          return ajaxMethod;\\n        }\\n\\n        return (...args: Parameters<typeof ajaxMethod>) => {\\n          args[headersPos] = {\\n            ...args[headersPos] as Record<string, string>,\\n            ...createAuthorizationHeader(token),\\n          };\\n\\n          return ajaxMethod.apply(this, args as any);\\n        };\\n      },\\n    });\\n  };\\n\\nexport const ajax = (token: string) => ajaxProxy(token, Ajax);\\n\")), mdx(\"p\", null, \"You can use \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Custom Operators\"), \" to wrap this new authenticated ajax function to use easily in existing Epics.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"4b09e8c8-9fbb-5ef0-bf8c-fe605b04890e","fields":{"slug":"/Redux Observable/Redux Observable Ajax Default Header Hack","title":"Redux Observable Ajax Default Header Hack"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redux-observable\"\n  }, \"Redux Observable\"), mdx(\"p\", null, \"All things observable!\"), mdx(\"h2\", {\n    \"id\": \"foamlinkredux-observable-setupfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Redux Observable Setup\"), \"\"), mdx(\"p\", null, \"Some setup notes for Redux Observable\"), mdx(\"h2\", {\n    \"id\": \"foamlinkredux-observable-ajaxfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Redux Observable Ajax\"), \"\"), mdx(\"p\", null, \"Some info on using the provided Ajax functions for HTTP requests.\"), mdx(\"h2\", {\n    \"id\": \"foamlinkredux-observable-ajax-default-header-hackfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Redux Observable Ajax Default Header Hack\"), \"\"), mdx(\"p\", null, \"A nice hack for inserting a token into the header of all Ajax HTTP requests\"), mdx(\"h2\", {\n    \"id\": \"foamlinkcustom-operatorsfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Custom Operators\"), \"\"), mdx(\"p\", null, \"Creating custom operators to make code more readable and allow testing of individual bits of behaviour.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"d77d91cc-b4f7-5c02-9d21-0a341f0960e6","fields":{"slug":"/Redux Observable/Redux Observable","title":"Redux Observable"}}}]},"fields":{"slug":"/Redux Observable/Custom Operators","title":"Custom Operators"}}},"pageContext":{"id":"2248517c-c7de-5413-af30-e4e8fa9bd422"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}