{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Git Account Switch",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-account-switch\"\n  }, \"Git Account Switch\"), mdx(\"p\", null, \"A simple PowerShell application to switch git accounts. Add somewhere and add it to your path.\"), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# personal account globally\\ngitSwitch -Scope Global -Account Personal\\n\\n# work account globally\\ngitSwitch -Scope Global -Account Work\\n\\n# personal account locally\\ngitSwitch -Scope Local -Account Personal\\n\\n# work account locally\\ngitSwitch -Scope Local -Account Work\\n\")), mdx(\"h2\", {\n    \"id\": \"code\"\n  }, \"Code\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# gitswitch.ps\\n\\nparam(\\n  [Parameter(Mandatory=$true)]\\n  [ValidateSet('Global','Local')]\\n  [String]$Scope,\\n \\n  [Parameter(Mandatory=$true)]\\n  [ValidateSet('Work','Personal')]\\n  [String]$Account\\n)\\n\\n$GitScope = if ($Scope -eq 'Global') { '--global' } else { '--local' }\\n\\n$PersonalAccount = [PSCustomObject]@{\\n  Name = 'Personal Name';\\n  Email = 'personal@me.com'\\n}\\n\\n$WorkAccount = [PSCustomObject]@{\\n  Name = 'Work name';\\n  Email = 'work@worky.com'\\n}\\n\\n$GitAccount = if ($Account -eq 'Work') { $WorkAccount} else { $PersonalAccount }\\n\\n\\ngit config $gitScope user.name $GitAccount.Name\\ngit config $gitScope user.email $GitAccount.Email\\n\\nif (-not $LASTEXITCODE) \\n{\\n  Write-Host \\\"Scope:\\\"$Scope\\n  Write-Host \\\"Name:\\\"$GitAccount.Name \\n  Write-Host \\\"Email:\\\"$GitAccount.Email \\n}\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Git Account Switch"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Code"}],"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/Git Account Switch","title":"Git Account Switch"}}},"pageContext":{"id":"628dc262-2d47-58e1-a16b-103efac5a870"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}