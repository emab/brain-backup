{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Git",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git\"\n  }, \"Git\"), mdx(\"p\", null, \"Git tips!\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Changing Commit Authors\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Resetting a forked branch\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git SSH\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git Account Switch\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Git"}],"outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"changing-commit-authors\"\n  }, \"Changing Commit Authors\"), mdx(\"p\", null, \"#git\"), mdx(\"p\", null, \"Two \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git\"), \" accounts can be annoying. Using \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git SSH\"), \" can help with that, but sometimes you still might forget to set your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.email\"), \" to the correct details.\"), mdx(\"h2\", {\n    \"id\": \"one-commit\"\n  }, \"One commit\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git commit --amend --author=\\\"John Doe <john@doe.org>\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"multiple-commits\"\n  }, \"Multiple commits\"), mdx(\"p\", null, \"To change author for last 2 commits:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git rebase -i HEAD~2\\n\")), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edit\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e\"), \" to any commits you'd like to change the author of. Then for each commit, you can amend as before:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git commit --amend --author=\\\"John Doe <john@doe.org>\\\" --no-edit\\ngit rebase --continue\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"74aa08fa-b4aa-5e07-9d1d-30734510d3ac","fields":{"slug":"/Changing Commit Authors","title":"Changing Commit Authors"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"resetting-a-forked-branch\"\n  }, \"Resetting a forked branch\"), mdx(\"p\", null, \"#git \"), mdx(\"p\", null, \"Forked a branch and finished merging and want yours to look like the original branch? Look no further!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git remote add upstream /url/to/original/repo\\ngit fetch upstream\\ngit checkout master\\ngit reset --hard upstream/master  \\ngit push origin master --force \\n\")), mdx(\"p\", null, \"If you want to preserve your commits:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git remote add upstream /url/to/original/repo\\ngit fetch upstream\\ngit checkout master\\ngit rebase upstream/master  \\ngit push origin master --force\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"638c6e43-85db-566e-a415-20dfa4ff414b","fields":{"slug":"/Resetting a forked branch","title":"Resetting a forked branch"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-ssh\"\n  }, \"Git SSH\"), mdx(\"p\", null, \"Really useful if you're using two or more \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git\"), \" accounts on a single computer. On windows I initially used the GitHub CLI tool, which allowed the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh auth login\"), \" but this got annoying due to 2FA.\"), mdx(\"p\", null, \"Switching to SSH made this process \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"much\"), \" easier, and it's relatively simple to get it set up.\"), mdx(\"h4\", {\n    \"id\": \"note\"\n  }, \"Note\"), mdx(\"p\", null, \"This will give you the correct permissions when pushing / pulling from a repo, but it will still use your global git config. Make sure to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --local user.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --local user.email\"), \" for each repository.\"), mdx(\"p\", null, \"Alternatively, see \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git Account Switch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"First you'll need to add some files in  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh\"), \" if they don't exist already:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"touch ~/.ssh/config && touch .bash_profile && touch .bashrc\\n\")), mdx(\"h2\", {\n    \"id\": \"ssh-keys\"\n  }, \"SSH Keys\"), mdx(\"p\", null, \"Follow the steps in the section named \\\"Generating a new SSH Key\\\" found in the following documentation from GitHub: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-windows\"\n  }, \"Generating a new SSH key and adding it to the ssh-agent\"))), mdx(\"h2\", {\n    \"id\": \"configure-ssh\"\n  }, \"Configure SSH\"), mdx(\"p\", null, \"Add your accounts using a unique hostname. Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdentityFile\"), \" to the name of the key you created for each account in the previous step.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"# ~/.ssh/config\\n\\n# personal github account\\nHost github.com\\n  HostName github.com\\n  IdentityFile ~/.ssh/id_personal\\n  IdentitiesOnly yes\\n  \\n# work github account\\nHost github-work\\n  HostName github.com\\n  IdentityFile ~/.ssh/id_work\\n  IdentitiesOnly yes\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"When cloning a repository, you can use each hostname depending on which account you'd like to use. For example your personal account:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone git@github.com:Username/repo.git\\n\")), mdx(\"p\", null, \"And for your work account:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone git@github-work:Username/repo.git\\n\")), mdx(\"p\", null, \"If you have an existing repository and want to update it to use SSH to avoid permission issues (assuming remote is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git remove -v\\ngit remote set-url origin git@github.com:Username/repo.git\\n\")), mdx(\"p\", null, \"Replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@github.com\"), \" with whatever hostname you'd like to use.\"), mdx(\"h2\", {\n    \"id\": \"auto-startup\"\n  }, \"Auto Startup\"), mdx(\"p\", null, \"This works great, but if you're running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git\"), \" commands from the command line you'll end up typing in your password a lot.\"), mdx(\"h3\", {\n    \"id\": \"bash\"\n  }, \"Bash\"), mdx(\"p\", null, \"First, ensure that following lines are added to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bash_profile\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"test -f ~/.profile && . ~/.profile\\ntest -f ~/.bashrc && . ~/.bashrc\\n\")), mdx(\"p\", null, \"Now, add the following text to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \", which should be found in your root user home folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Start SSH Agent\\n#----------------------------\\n\\nSSH_ENV=\\\"$HOME/.ssh/environment\\\"\\n\\nfunction run_ssh_env {\\n  . \\\"${SSH_ENV}\\\" > /dev/null\\n}\\n\\nfunction start_ssh_agent {\\n  echo \\\"Initializing new SSH agent...\\\"\\n  ssh-agent | sed 's/^echo/#echo/' > \\\"${SSH_ENV}\\\"\\n  echo \\\"succeeded\\\"\\n  chmod 600 \\\"${SSH_ENV}\\\"\\n\\n  run_ssh_env;\\n\\n  # add your SSH keys here\\n  ssh-add ~/.ssh/id_rsa;\\n}\\n\\nif [ -f \\\"${SSH_ENV}\\\" ]; then\\n  run_ssh_env;\\n  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {\\n    start_ssh_agent;\\n  }\\nelse\\n  start_ssh_agent;\\nfi\\n\")), mdx(\"h3\", {\n    \"id\": \"windows\"\n  }, \"Windows\"), mdx(\"p\", null, \"By default the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sshd\"), \" service is set to start manually. To start it each time the server is rebooted, run the following commands from an elevated PowerShell prompt:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# By default the ssh-agent service is disabled. Allow it to be manually started for the next step to work.\\n# Make sure you're running as an Administrator.\\nGet-Service ssh-agent | Set-Service -StartupType Manual\\n\\n# Start the service\\nStart-Service ssh-agent\\n\\n# This should return a status of Running\\nGet-Service ssh-agent\\n\\n# Now load your key files into ssh-agent\\nssh-add ~\\\\.ssh\\\\id_personal\\nssh-add ~\\\\.ssh\\\\id_work\\n\")), mdx(\"p\", null, \"If you're having problems getting the service running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# check if the service is running\\nGet-Service ssh-agent\\n\\n# check if it has been disabled\\nGet-Service ssh-agent | Select StartType\\n\\n# if it is then set start type to manual\\nGet-Service ssh-agent -Name ssh-agent | Set-Service -StartupType Manual\\n\\n# start the service \\nStart-Service ssh-agent\\n\\n# optionally set it back to automatic\\nGet-Service ssh-agent -Name ssh-agent | Set-Service -StartupType Automatic\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"b2b55bb8-1c5f-5f2e-9b70-1f4382600b76","fields":{"slug":"/Git SSH","title":"Git SSH"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-account-switch\"\n  }, \"Git Account Switch\"), mdx(\"p\", null, \"A simple PowerShell application to switch git accounts. Add somewhere and add it to your path.\"), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# personal account globally\\ngitSwitch -Scope Global -Account Personal\\n\\n# work account globally\\ngitSwitch -Scope Global -Account Work\\n\\n# personal account locally\\ngitSwitch -Scope Local -Account Personal\\n\\n# work account locally\\ngitSwitch -Scope Local -Account Work\\n\")), mdx(\"h2\", {\n    \"id\": \"code\"\n  }, \"Code\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# gitswitch.ps\\n\\nparam(\\n  [Parameter(Mandatory=$true)]\\n  [ValidateSet('Global','Local')]\\n  [String]$Scope,\\n \\n  [Parameter(Mandatory=$true)]\\n  [ValidateSet('Work','Personal')]\\n  [String]$Account\\n)\\n\\n$GitScope = if ($Scope -eq 'Global') { '--global' } else { '--local' }\\n\\n$PersonalAccount = [PSCustomObject]@{\\n  Name = 'Personal Name';\\n  Email = 'personal@me.com'\\n}\\n\\n$WorkAccount = [PSCustomObject]@{\\n  Name = 'Work name';\\n  Email = 'work@worky.com'\\n}\\n\\n$GitAccount = if ($Account -eq 'Work') { $WorkAccount} else { $PersonalAccount }\\n\\n\\ngit config $gitScope user.name $GitAccount.Name\\ngit config $gitScope user.email $GitAccount.Email\\n\\nif (-not $LASTEXITCODE) \\n{\\n  Write-Host \\\"Scope:\\\"$Scope\\n  Write-Host \\\"Name:\\\"$GitAccount.Name \\n  Write-Host \\\"Email:\\\"$GitAccount.Email \\n}\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"78027412-2dc8-5ecd-a859-2feb7e89e339","fields":{"slug":"/Git Account Switch","title":"Git Account Switch"}}}],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"changing-commit-authors\"\n  }, \"Changing Commit Authors\"), mdx(\"p\", null, \"#git\"), mdx(\"p\", null, \"Two \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git\"), \" accounts can be annoying. Using \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git SSH\"), \" can help with that, but sometimes you still might forget to set your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.email\"), \" to the correct details.\"), mdx(\"h2\", {\n    \"id\": \"one-commit\"\n  }, \"One commit\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git commit --amend --author=\\\"John Doe <john@doe.org>\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"multiple-commits\"\n  }, \"Multiple commits\"), mdx(\"p\", null, \"To change author for last 2 commits:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git rebase -i HEAD~2\\n\")), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edit\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e\"), \" to any commits you'd like to change the author of. Then for each commit, you can amend as before:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"git commit --amend --author=\\\"John Doe <john@doe.org>\\\" --no-edit\\ngit rebase --continue\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"74aa08fa-b4aa-5e07-9d1d-30734510d3ac","fields":{"slug":"/Changing Commit Authors","title":"Changing Commit Authors"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"brain-bank\"\n  }, \"Brain Bank\"), mdx(\"h2\", {\n    \"id\": \"foamlinktodofoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"todo\"), \"\"), mdx(\"h2\", {\n    \"id\": \"foamlinkinboxfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"inbox\"), \"\"), mdx(\"h3\", {\n    \"id\": \"contents\"\n  }, \"Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Complexity\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Event Listener Handler Map React\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Redux Observable Setup\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"09f14e56-d3b8-59aa-882b-3f8c76cf46ad","fields":{"slug":"/home","title":"Brain Bank"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"git-ssh\"\n  }, \"Git SSH\"), mdx(\"p\", null, \"Really useful if you're using two or more \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git\"), \" accounts on a single computer. On windows I initially used the GitHub CLI tool, which allowed the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh auth login\"), \" but this got annoying due to 2FA.\"), mdx(\"p\", null, \"Switching to SSH made this process \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"much\"), \" easier, and it's relatively simple to get it set up.\"), mdx(\"h4\", {\n    \"id\": \"note\"\n  }, \"Note\"), mdx(\"p\", null, \"This will give you the correct permissions when pushing / pulling from a repo, but it will still use your global git config. Make sure to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --local user.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git config --local user.email\"), \" for each repository.\"), mdx(\"p\", null, \"Alternatively, see \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Git Account Switch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"First you'll need to add some files in  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh\"), \" if they don't exist already:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"touch ~/.ssh/config && touch .bash_profile && touch .bashrc\\n\")), mdx(\"h2\", {\n    \"id\": \"ssh-keys\"\n  }, \"SSH Keys\"), mdx(\"p\", null, \"Follow the steps in the section named \\\"Generating a new SSH Key\\\" found in the following documentation from GitHub: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-windows\"\n  }, \"Generating a new SSH key and adding it to the ssh-agent\"))), mdx(\"h2\", {\n    \"id\": \"configure-ssh\"\n  }, \"Configure SSH\"), mdx(\"p\", null, \"Add your accounts using a unique hostname. Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdentityFile\"), \" to the name of the key you created for each account in the previous step.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"# ~/.ssh/config\\n\\n# personal github account\\nHost github.com\\n  HostName github.com\\n  IdentityFile ~/.ssh/id_personal\\n  IdentitiesOnly yes\\n  \\n# work github account\\nHost github-work\\n  HostName github.com\\n  IdentityFile ~/.ssh/id_work\\n  IdentitiesOnly yes\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"When cloning a repository, you can use each hostname depending on which account you'd like to use. For example your personal account:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone git@github.com:Username/repo.git\\n\")), mdx(\"p\", null, \"And for your work account:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git clone git@github-work:Username/repo.git\\n\")), mdx(\"p\", null, \"If you have an existing repository and want to update it to use SSH to avoid permission issues (assuming remote is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"origin\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"git remove -v\\ngit remote set-url origin git@github.com:Username/repo.git\\n\")), mdx(\"p\", null, \"Replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@github.com\"), \" with whatever hostname you'd like to use.\"), mdx(\"h2\", {\n    \"id\": \"auto-startup\"\n  }, \"Auto Startup\"), mdx(\"p\", null, \"This works great, but if you're running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git\"), \" commands from the command line you'll end up typing in your password a lot.\"), mdx(\"h3\", {\n    \"id\": \"bash\"\n  }, \"Bash\"), mdx(\"p\", null, \"First, ensure that following lines are added to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bash_profile\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"test -f ~/.profile && . ~/.profile\\ntest -f ~/.bashrc && . ~/.bashrc\\n\")), mdx(\"p\", null, \"Now, add the following text to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \", which should be found in your root user home folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Start SSH Agent\\n#----------------------------\\n\\nSSH_ENV=\\\"$HOME/.ssh/environment\\\"\\n\\nfunction run_ssh_env {\\n  . \\\"${SSH_ENV}\\\" > /dev/null\\n}\\n\\nfunction start_ssh_agent {\\n  echo \\\"Initializing new SSH agent...\\\"\\n  ssh-agent | sed 's/^echo/#echo/' > \\\"${SSH_ENV}\\\"\\n  echo \\\"succeeded\\\"\\n  chmod 600 \\\"${SSH_ENV}\\\"\\n\\n  run_ssh_env;\\n\\n  # add your SSH keys here\\n  ssh-add ~/.ssh/id_rsa;\\n}\\n\\nif [ -f \\\"${SSH_ENV}\\\" ]; then\\n  run_ssh_env;\\n  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {\\n    start_ssh_agent;\\n  }\\nelse\\n  start_ssh_agent;\\nfi\\n\")), mdx(\"h3\", {\n    \"id\": \"windows\"\n  }, \"Windows\"), mdx(\"p\", null, \"By default the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sshd\"), \" service is set to start manually. To start it each time the server is rebooted, run the following commands from an elevated PowerShell prompt:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# By default the ssh-agent service is disabled. Allow it to be manually started for the next step to work.\\n# Make sure you're running as an Administrator.\\nGet-Service ssh-agent | Set-Service -StartupType Manual\\n\\n# Start the service\\nStart-Service ssh-agent\\n\\n# This should return a status of Running\\nGet-Service ssh-agent\\n\\n# Now load your key files into ssh-agent\\nssh-add ~\\\\.ssh\\\\id_personal\\nssh-add ~\\\\.ssh\\\\id_work\\n\")), mdx(\"p\", null, \"If you're having problems getting the service running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-powershell\"\n  }, \"# check if the service is running\\nGet-Service ssh-agent\\n\\n# check if it has been disabled\\nGet-Service ssh-agent | Select StartType\\n\\n# if it is then set start type to manual\\nGet-Service ssh-agent -Name ssh-agent | Set-Service -StartupType Manual\\n\\n# start the service \\nStart-Service ssh-agent\\n\\n# optionally set it back to automatic\\nGet-Service ssh-agent -Name ssh-agent | Set-Service -StartupType Automatic\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"b2b55bb8-1c5f-5f2e-9b70-1f4382600b76","fields":{"slug":"/Git SSH","title":"Git SSH"}}}]},"fields":{"slug":"/Git","title":"Git"}}},"pageContext":{"id":"df3e8a1e-f071-5013-8249-742e62ffbea0"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}