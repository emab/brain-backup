{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Cypress and MSAL SSO",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cypress-and-msal-sso\"\n  }, \"Cypress and MSAL SSO\"), mdx(\"p\", null, \"Created an application that used \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Azure SSO Integration\"), \" and wanted to test with Cypress. I was thinking about bypassing the login altogether but the doucmentation advised against this.\"), mdx(\"p\", null, \"Instead of skipping authentication or manually typing in a username and password each time, you should inject the relevant information into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \".\"), mdx(\"h3\", {\n    \"id\": \"requirements\"\n  }, \"Requirements:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Azure AD Tenant\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Worth creating a seperate one for testing environment\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create the API / App applications as described in \", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\")), mdx(\"h2\", {\n    \"id\": \"cypress-setup\"\n  }, \"Cypress Setup\"), mdx(\"p\", null, \"First you'll need to store some secrets in Cypress to be used when getting auth details:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"// support/authSettings.json\\n{\\n  \\\"authority\\\": \\\"https://login.microsoftonline.com/your-aad-tenant-id\\\",\\n  \\\"clientId\\\": \\\"app-client-id\\\",\\n  \\\"clientSecret\\\": \\\"app-client-secret\\\",\\n  \\\"apiScopes\\\": [\\\"api://api-client-id/Data.Read\\\"],\\n  \\\"username\\\": \\\"user@yourcompany.onmicrosoft.com\\\",\\n  \\\"password\\\": \\\"password\\\"\\n}\\n\")), mdx(\"p\", null, \"Along with the following support file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nexport const _frontmatter = {}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Cypress and MSAL SSO"},{"depth":3,"value":"Requirements:"},{"depth":2,"value":"Cypress Setup"}],"outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"azure-sso-integration\"\n  }, \"Azure SSO Integration\"), mdx(\"p\", null, \"Done with a React front-end application and a Spring Boot back-end.\"), mdx(\"p\", null, \"Implementation was quite straight forward, and enabled a JWT token to be used to authorize requests from the front-end to the back-end.\"), mdx(\"h2\", {\n    \"id\": \"requirements\"\n  }, \"Requirements\"), mdx(\"h3\", {\n    \"id\": \"cloud\"\n  }, \"Cloud\"), mdx(\"p\", null, \"You'll need an Active Directory initially. From here you create two app registrations, one for the API and one for the App.\"), mdx(\"h4\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"In the API configuration you should add scopes via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Expose an API\"), \". Add an Application URI here then add a scope such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User.Access\"), \". This should give you something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"api://0000000-0000-0000-0000-0000000/User.Access\\n\")), mdx(\"p\", null, \"Below this you should also add the App as a client application.\"), mdx(\"h4\", {\n    \"id\": \"app\"\n  }, \"App\"), mdx(\"p\", null, \"The App authentication should be set up to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Access Tokens (used for implicit flows)\"), \" and include suitable redirect URIs for login callbacks.\"), mdx(\"p\", null, \"You should then go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API Permissions\"), \" and add the scope we saw above as a permission.\"), mdx(\"p\", null, \"This should now allow a token to be created from the front-end using the scope defined in the API, which will then be decoded by Spring Boot.\"), mdx(\"h3\", {\n    \"id\": \"front-end\"\n  }, \"Front-end\"), mdx(\"p\", null, \"Used the new provided packages from Azure, which provide some handy hooks for authentication if you're using functional components.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@azure/msal-browser\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@azure/msal-react\"))), mdx(\"p\", null, \"Also provide some basic auth config:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"export const msalConfig = {\\n  auth: {\\n    clientId: '<app-registration-client-id>',\\n    authority:\\n      'https://login.microsoftonline.com/<AAD-resource-id>',\\n  },\\n  cache: {\\n    cacheLocation: 'sessionStorage',\\n  },\\n};\\n\\nexport const loginRequest = {\\n  // this corresponds to the User.Read scope for accessing the\\n  // Azure Graph API which holds user info \\n  scopes: ['User.Read'],\\n};\\n\\n// this scope comes from the Azure App Registration setup\\n// This will be the API app url and scope which the front-end will try\\n// to use when authenticating with token\\nexport const USER_API_SCOPE =\\n  'api://<api-url-from-azure>/<Some.Scope>';\\n\")), mdx(\"p\", null, \"Getting and using a token is also straightforward. The below example uses the scope from the file above to request a token - different tokens could be substituted here:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"export default async (\\n  instance: IPublicClientApplication,\\n  account: AccountInfo\\n): Promise<string> => {\\n  const tokenResult = await instance.acquireTokenSilent({\\n    scopes: [USER_API_SCOPE],\\n    account,\\n  });\\n\\n  return tokenResult.accessToken;\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"back-end\"\n  }, \"Back-end\"), mdx(\"p\", null, \"You'll need a couple of dependencies for Spring Boot and Azure to work nicely:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.springframework.boot:spring-boot-starter-security\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"com.azure.spring:azure-spring-boot-starter-active-directory\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.springframework.boot:spring-boot-starter-oauth2-resource-server\"))), mdx(\"p\", null, \"The configuration is minimal for newer versions of Spring Boot:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"import com.azure.spring.aad.webapi.AADResourceServerWebSecurityConfigurerAdapter;\\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\\n\\n@EnableWebSecurity\\n@EnableGlobalMethodSecurity(prePostEnabled = true)\\npublic class AADOAuth2ResourceServerSecurityConfig extends AADResourceServerWebSecurityConfigurerAdapter {\\n    @Override\\n    protected void configure(HttpSecurity http) throws Exception {\\n        super.configure(http);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Remember to add this to your main application if you didn't already:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// Web security\\n@EnableWebSecurity\\n@SpringBootApplication\\npublic class ApiApplication {\\n    public static void main(String[] args) {\\n        SpringApplication.run(ApiApplication.class, args);\\n    }\\n}\\n\")), mdx(\"p\", null, \"You can then check for authorities like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@RestController\\npublic class HelloController {\\n\\n    @GetMapping(\\\"/hello\\\")\\n    @PreAuthorize(\\\"hasAuthority('SCOPE_User.Access')\\\")\\n    public MessageResponse authenticated() {\\n        return new MessageResponse(\\\"Authenticated with API with correct scope!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"I needed the following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application.properties\"), \" in order for this to work properly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-properties\"\n  }, \"azure.activedirectory.tenant-id=<azure-active-directory-tenant-id>\\nazure.activedirectory.client-id=<the-id-of-the-frontend-application>\\n# looks like api://0000000-0000-0000-0000-0000000\\n# we put it before the scope used in the front-end earlier\\nazure.activedirectory.app-id-uri=<the-app-uri-created-in-api-app-registration-page>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"81f1fb16-cf25-555e-aa32-7200aeb81a7a","fields":{"slug":"/Azure SSO Integration","title":"Azure SSO Integration"}}}],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"todo\"\n  }, \"Todo\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add \", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Cypress and MSAL SSO\"), \" stuff\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"dc5d8615-3d39-5e34-a094-517079d839f3","fields":{"slug":"/todo","title":"Todo"}}}]},"fields":{"slug":"/Cypress and MSAL SSO","title":"Cypress and MSAL SSO"}}},"pageContext":{"id":"8c7a7bd8-0843-5174-85f2-e85944bdd262"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}