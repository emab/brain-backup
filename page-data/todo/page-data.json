{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/todo",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"todo\"\n  }, \"Todo\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  }), \" \", \"Add \", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Cypress and MSAL SSO\"), \" stuff\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Todo"}],"outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cypress-and-msal-sso\"\n  }, \"Cypress and MSAL SSO\"), mdx(\"p\", null, \"Created an application that used \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Azure SSO Integration\"), \" and wanted to test with Cypress. I was thinking about bypassing the login altogether but the doucmentation advised against this.\"), mdx(\"p\", null, \"Instead of skipping authentication or manually typing in a username and password each time, you should inject the relevant information into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \".\"), mdx(\"h3\", {\n    \"id\": \"requirements\"\n  }, \"Requirements:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Azure AD Tenant\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Worth creating a seperate one for testing environment\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create the API / App applications as described in \", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\")), mdx(\"h2\", {\n    \"id\": \"cypress-setup\"\n  }, \"Cypress Setup\"), mdx(\"p\", null, \"First you'll need to store some secrets in Cypress to be used when getting auth details:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"// support/authSettings.json\\n{\\n  \\\"authority\\\": \\\"https://login.microsoftonline.com/your-aad-tenant-id\\\",\\n  \\\"clientId\\\": \\\"app-client-id\\\",\\n  \\\"apiScopes\\\": [\\\"api://api-client-id/Data.Read\\\"],\\n  \\\"username\\\": \\\"user@yourcompany.onmicrosoft.com\\\",\\n    \\n  // These are both very secret\\n  \\\"clientSecret\\\": \\\"app-client-secret\\\",\\n  \\\"password\\\": \\\"password\\\"\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WARNING\"), \"\\nYou should \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" check in the test users \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clientSecret\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \" into VCS. See \", mdx(\"foamlink\", {\n    parentName: \"p\"\n  }, \"Azure Key Vault JavaScript\"), \" for a way to inject these variables, or share them in some other secure way.\"), mdx(\"p\", null, \"Along with the following support file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// support/auth.ts\\n\\nimport { decode } from \\\"jsonwebtoken\\\";  \\nimport * as authSettings from \\\"./authsettings.json\\\";  \\nimport Chainable = Cypress.Chainable;  \\nimport AUTWindow = Cypress.AUTWindow;  \\n  \\n/*  \\n * Adapted from https://github.com/juunas11/AzureAdUiTestAutomation \\n */  \\n\\ntype TokenResponseBody = {  \\n  access_token: string;  \\n  expires_in: number;  \\n  ext_expires_in: number;  \\n  id_token: string;  \\n};  \\n  \\ntype TokenResponse = {  \\n  body: TokenResponseBody;  \\n  status: number;  \\n};  \\n  \\nconst { \\n    authority, \\n    clientId, \\n    apiScopes, \\n    username, \\n    clientSecret, \\n    password } = authSettings;  \\nconst environment = \\\"login.windows.net\\\";  \\n  \\nconst buildAccountEntity = (  \\n  homeAccountId,  \\n realm,  \\n localAccountId,  \\n username,  \\n name  \\n) => ({  \\n  authorityType: \\\"MSSTS\\\",  \\n  clientInfo: \\\"\\\",  \\n  homeAccountId,  \\n  environment,  \\n  realm,  \\n  localAccountId,  \\n  username,  \\n  name,  \\n});  \\n  \\nconst buildIdTokenEntity = (homeAccountId, idToken, realm) => ({  \\n  credentialType: \\\"IdToken\\\",  \\n  homeAccountId,  \\n  environment,  \\n  clientId,  \\n  secret: idToken,  \\n  realm,  \\n});    \\n  \\nconst buildAccessTokenEntity = (  \\n  homeAccountId,  \\n accessToken,  \\n expiresIn,  \\n extExpiresIn,  \\n realm,  \\n scopes  \\n) => {  \\n  const now = Math.floor(Date.now() / 1000);  \\n   return {  \\n    homeAccountId,  \\n     credentialType: \\\"AccessToken\\\",  \\n     secret: accessToken,  \\n     cachedAt: now.toString(),  \\n     expiresOn: (now + expiresIn).toString(),  \\n     extendedExpiresOn: (now + extExpiresIn).toString(),  \\n     environment,  \\n     clientId,  \\n     realm,  \\n     target: scopes.map((s) => s.toLowerCase()).join(\\\" \\\"),  \\n   };  \\n};  \\n  \\nconst injectTokens = (tokenResponse) => {  \\n  const idToken = decode(tokenResponse.id_token);  \\n  const localAccountId = idToken.oid || idToken.sid;  \\n  const realm = idToken.tid;  \\n    const homeAccountId = `${localAccountId}.${realm}`;  \\n    const username = idToken.preferred_username;  \\n    const name = idToken.name;  \\n  \\n    const accountKey = `${homeAccountId}-${environment}-${realm}`;  \\n    const accountEntity = buildAccountEntity(  \\n      homeAccountId,  \\n      realm,  \\n      localAccountId,  \\n      username,  \\n      name  \\n     );  \\n  \\n const idTokenKey = \\n       `${homeAccountId}-${environment}-idtoken-${clientId}-${realm}-`;  \\n const idTokenEntity = buildIdTokenEntity(  \\n    homeAccountId,  \\n    tokenResponse.id_token,  \\n    realm  \\n  );  \\n  \\n const accessTokenKey = \\n       `${homeAccountId}-${environment}-accesstoken-${clientId}-${realm}-${apiScopes.join(  \\n    \\\" \\\")}`;  \\n const accessTokenEntity = buildAccessTokenEntity(  \\n    homeAccountId,  \\n    tokenResponse.access_token,  \\n    tokenResponse.expires_in,  \\n    tokenResponse.ext_expires_in,  \\n    realm,  \\n    apiScopes  \\n  );  \\n  \\n sessionStorage.setItem(accountKey, JSON.stringify(accountEntity));  \\n sessionStorage.setItem(idTokenKey, JSON.stringify(idTokenEntity));  \\n sessionStorage.setItem(accessTokenKey, JSON.stringify(accessTokenEntity));  \\n};  \\n  \\nexport const login = (  \\n  cachedTokenResponse: TokenResponse  \\n): Chainable<Cypress.Response<any>> => {  \\n  let tokenResponse = null;  \\n  let chainable: Chainable<AUTWindow> | Chainable<Cypress.Response<any>> =  \\n    cy.visit(\\\"/\\\");  \\n  \\n  if (!cachedTokenResponse) {  \\n     chainable = chainable.request({  \\n       url: authority + \\\"/oauth2/v2.0/token\\\",  \\n       method: \\\"POST\\\",  \\n       body: {  \\n         grant_type: \\\"password\\\",  \\n         client_id: clientId,  \\n         client_secret: clientSecret,  \\n         scope: [\\\"openid profile\\\"].concat(apiScopes).join(\\\" \\\"),  \\n         username,  \\n         password,  \\n       },  \\n       form: true,  \\n     });  \\n   } else {  \\n     chainable.then(() => {  \\n       return {  \\n         body: cachedTokenResponse,  \\n       };  \\n   });  \\n }  \\n  (chainable as Chainable<Cypress.Response<any>>)  \\n    .then((response: TokenResponse) => {  \\n      injectTokens(response.body);  \\n   tokenResponse = response.body;  \\n   })  \\n   .reload()  \\n   .then(() => {  \\n     return tokenResponse;  \\n });  \\n  \\n return chainable as Chainable<Cypress.Response<any>>;  \\n};\\n\")), mdx(\"p\", null, \"This file is responsible for making a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" request to Azure AD and setting the session storage with your credentials.\"), mdx(\"p\", null, \"We can now add the exposed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"login\"), \" function to Cypress:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// support/commands.ts\\n\\nlet cachedTokenExpiryTime = new Date().getTime();  \\nlet cachedTokenResponse = null;  \\n  \\nCypress.Commands.add(\\\"login\\\", () => {  \\n  // Clear our cache if tokens are expired  \\n if (cachedTokenExpiryTime <= new Date().getTime()) {  \\n    cachedTokenResponse = null;  \\n }  \\n  \\n  return login(cachedTokenResponse).then((tokenResponse) => {  \\n    cachedTokenResponse = tokenResponse;  \\n    // Set expiry time to 50 minutes from now  \\n    cachedTokenExpiryTime = new Date().getTime() + 50 * 60 * 1000;  \\n  });  \\n});\\n\")), mdx(\"p\", null, \"You should also add a type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// support/index.ts\\n\\n// ***********************************************************  \\n// This example support/index.js is processed and  \\n// loaded automatically before your test files.  \\n//  \\n// This is a great place to put global configuration and  \\n// behavior that modifies Cypress.  \\n//  \\n// You can change the location of this file or turn off  \\n// automatically serving support files with the  \\n// 'supportFile' configuration option.  \\n//  \\n// You can read more here:  \\n// https://on.cypress.io/configuration  \\n// ***********************************************************  \\n  \\n// Import commands.js using ES2015 syntax:  \\nimport \\\"./commands\\\";  \\n  \\n// Alternatively you can use CommonJS syntax:  \\n// require('./commands')  \\ndeclare global {  \\n  namespace Cypress {  \\n    interface Chainable {  \\n      login(): Chainable<Cypress.Response<any>>;  \\n }  \\n  }  \\n}\\n\")), mdx(\"p\", null, \"Now you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"login\"), \" command to skip your splash screen and authenticated a user! \\uD83C\\uDF89\"), mdx(\"p\", null, \"Example usage:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"cy.login().visit(\\\"/secure\\\");\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"ea972831-d62c-59b4-97e4-f77cae8dca3e","fields":{"slug":"/Cypress and MSAL SSO","title":"Cypress and MSAL SSO"}}}],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"home\"\n  }, \"Home\"), mdx(\"h2\", {\n    \"id\": \"foamlinktodofoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Todo\"), \"\"), mdx(\"h3\", {\n    \"id\": \"contents\"\n  }, \"Contents\"), mdx(\"h4\", {\n    \"id\": \"web\"\n  }, \"Web\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Redux Observable\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Event Listener Handler Map React\"), \"\")), mdx(\"h4\", {\n    \"id\": \"cloud\"\n  }, \"Cloud\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\")), mdx(\"h4\", {\n    \"id\": \"language\"\n  }, \"Language\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java\"), \"\")), mdx(\"h4\", {\n    \"id\": \"concepts\"\n  }, \"Concepts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Complexity\"), \"\")), mdx(\"h4\", {\n    \"id\": \"utils\"\n  }, \"Utils\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Git\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"4a4265b1-469c-5a80-b03c-eb7174fed1fb","fields":{"slug":"/Home","title":"Home"}}}]},"fields":{"slug":"/todo","title":"Todo"}}},"pageContext":{"id":"19ff8983-105d-5fbb-81a6-3980332d1d66"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}