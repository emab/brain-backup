{
    "componentChunkName": "component---node-modules-gatsby-philipps-foam-theme-src-templates-local-file-jsx",
    "path": "/Java",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java\"\n  }, \"Java\"), mdx(\"p\", null, \"A place for all things Java.\"), mdx(\"h2\", {\n    \"id\": \"foamlinkjava-primitivesfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"Java Primitives\"), \"\"), mdx(\"p\", null, \"Some notes on Java primitives.\"), mdx(\"h2\", {\n    \"id\": \"core-objects\"\n  }, \"Core Objects\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java String\"), \"\")), mdx(\"h2\", {\n    \"id\": \"data-structures\"\n  }, \"Data Structures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java Maps\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":1,"value":"Java"},{"depth":2,"value":"[Java Primitives]"},{"depth":2,"value":"Core Objects"},{"depth":2,"value":"Data Structures"}],"outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-primitives\"\n  }, \"Java Primitives\"), mdx(\"p\", null, \"Sourced from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\"\n  }, \"Orcacle docs\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"byte\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"short\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"int\"), \" and long are \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Two%27s_complement\"\n  }, \"two's compliment\"), \" integers.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"byte\"), \": 8-bit signed  integer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-128\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"127\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful in large arrays when saving memory matters, or for deliberately setting a limit on a value range\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"short\"), \": 16-bit signed two's compliment integer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-32,768\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"32,767\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful in large arrays when saving memory matters, or for deliberately setting a limit on a value range\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"int\"), \": 32-bit signed integer (by default)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-2^31\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^31 -1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can use as unsigned \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^32\"), \" int in Java SE 8+\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"long\"), \": 64-bit signed integer (by default)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-2^63\"), \" and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^63 -1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can use as unsigned \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^64\"), \" long in Java SE 8+\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"only use if you're going to use numbers larger range of int\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"float\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\"\n  }, \"single-precision\"), \" 32-bit floating point\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use if you need to save memory in a large array, otherwise use double\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"should \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"never\"), \" be used for precise values such as currency, use BigDecimal instead\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"double\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\n  }, \"double-precision\"), \" 64-bit floating point\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"generally the default choice for decimal values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"should \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"never\"), \" be used for precise values such as currency, use BigDecimal instead\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"boolean\"), \": two possible values: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"char\"), \": single 16-bit Unicode character\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\u0000\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \") and a maximum value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\uffff\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"65,535\"), \" inclusive)\")))), mdx(\"p\", null, \"In addition to the 8 primitives above, Java also provides special support for character strings via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.lang.String\"), \" class. Enclosing a string in double quotes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" will automatically create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" object, whereas single quotes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'\"), \" create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"char\"), \" type. A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"immutable\"), \".\"), mdx(\"h2\", {\n    \"id\": \"default-values\"\n  }, \"Default values\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Data Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default value\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"byte\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"short\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"long\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0L\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"float\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0.0f\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"double\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0.0d\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"char\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\\u0000\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String (or any object)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))))), mdx(\"h2\", {\n    \"id\": \"character-and-string-literals\"\n  }, \"Character and String Literals\"), mdx(\"p\", null, \"May contain any Unicode characters. Always \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"char\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" types.\"), mdx(\"p\", null, \"The Java programming language also supports a few special escape sequences for char and String literals: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\b\"), \" (backspace), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\t\"), \" (tab), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \" (line feed), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\f\"), \" (form feed), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\r\"), \" (carriage return), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\\\\"\"), \" (double quote), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\'\"), \" (single quote), and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\\\\\\"), \" (backslash).\"), mdx(\"p\", null, \"Also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" literal, which can be used as a value for any reference type. \"), mdx(\"p\", null, \"Also a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class\"), \" literal, which is formed by taking a type name and appending \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".class\"), \", for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String.class\"), \" refers to the object that represents the type.\"), mdx(\"h2\", {\n    \"id\": \"integer-literals\"\n  }, \"Integer Literals\"), mdx(\"p\", null, \"An integer literal is of type long if it ends with the letter L or l; otherwise it is of type int. It is recommended that you use the upper case letter L because the lower case letter l is hard to distinguish from the digit 1.\"), mdx(\"p\", null, \"Values of the integral types byte, short, int, and long can be created from int literals. Values of type long that exceed the range of int can be created from long literals. Integer literals can be expressed by these number systems:\"), mdx(\"p\", null, \"Decimal: Base 10, whose digits consists of the numbers 0 through 9; this is the number system you use every day\\nHexadecimal: Base 16, whose digits consist of the numbers 0 through 9 and the letters A through F\\nBinary: Base 2, whose digits consists of the numbers 0 and 1 (you can create binary literals in Java SE 7 and later)\\nFor general-purpose programming, the decimal system is likely to be the only number system you'll ever use. However, if you need to use another number system, the following example shows the correct syntax. The prefix 0x indicates hexadecimal and 0b indicates binary:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// The number 26, in decimal\\nint decVal = 26;\\n//  The number 26, in hexadecimal\\nint hexVal = 0x1a;\\n// The number 26, in binary\\nint binVal = 0b11010;\\n\")), mdx(\"h2\", {\n    \"id\": \"floating-point-literals\"\n  }, \"Floating-Point Literals\"), mdx(\"p\", null, \"A floating-point literal is of type float if it ends with the letter F or f; otherwise its type is double and it can optionally end with the letter D or d.\"), mdx(\"p\", null, \"The floating point types (float and double) can also be expressed using E or e (for scientific notation), F or f (32-bit float literal) and D or d (64-bit double literal; this is the default and by convention is omitted).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"double d1 = 123.4;\\n// same value as d1, but in scientific notation\\ndouble d2 = 1.234e2;\\nfloat f1  = 123.4f;\\n\")), mdx(\"h2\", {\n    \"id\": \"underscore-characters\"\n  }, \"Underscore Characters\"), mdx(\"p\", null, \"In Java SE 7+ you can use any number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" characters between digits to improve readability:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"long creditCardNumber = 1234_5678_9012_3456L;\\nlong socialSecurityNumber = 999_99_9999L;\\nfloat pi =  3.14_15F;\\nlong hexBytes = 0xFF_EC_DE_5E;\\nlong hexWords = 0xCAFE_BABE;\\nlong maxLong = 0x7fff_ffff_ffff_ffffL;\\nbyte nybbles = 0b0010_0101;\\nlong bytes = 0b11010010_01101001_10010100_10010010;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"3ff90915-5361-5580-8a63-db000e18054c","fields":{"slug":"/Java Primitives","title":"Java Primitives"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-string\"\n  }, \"Java String\"), mdx(\"p\", null, \"Is not a primitive type, but is sometimes treated as such in Java as the language provides some special support out of the box. Strings can be created using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\"), \" around characters.\"), mdx(\"p\", null, \"Strings are constant - their value cannot be changed after they are created.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String str = \\\"abc\\\";\\n\")), mdx(\"p\", null, \"is equivalent to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"char data[] = {'a', 'b', 'c'};\\nString str = new String(data);\\n\")), mdx(\"p\", null, \"Here are some more examples of how strings can be used:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"System.out.println(\\\"abc\\\");\\nString cde = \\\"cde\\\";\\nSystem.out.println(\\\"abc\\\" + cde);\\nString c = \\\"abc\\\".substring(2,3);\\n\")), mdx(\"h2\", {\n    \"id\": \"useful-methods\"\n  }, \"Useful methods\"), mdx(\"h3\", {\n    \"id\": \"indexof\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"indexOf\")), mdx(\"p\", null, \"Multiple versions of this method, but can be useful for code wars style questions when working with strings.\"), mdx(\"p\", null, \"Both of these methods also allow you to supply a second argument \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int fromIndex\"), \" to specify the start point of the search.\"), mdx(\"h4\", {\n    \"id\": \"indexofstring-str--int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"indexOf(String str) : int\")), mdx(\"p\", null, \"Returns the index of the substring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"str\"), \" within the string.\"), mdx(\"h4\", {\n    \"id\": \"indexofint-ch--int\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"indexOf(int ch) : int\")), mdx(\"p\", null, \"Returns the index of the first occurrence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ch\"), \" in the String, returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-1\"), \" if it doesn't exist. \"), mdx(\"h3\", {\n    \"id\": \"lastindexof\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"lastIndexOf\")), mdx(\"p\", null, \"Similarly to the method above, but returns the last index of a substring or character within a string. This is useful when you want to check if a substring / character only appears in the string once:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"boolean appearsOnce(String str, char ch) {\\n    return str.indexOf(ch) == str.lastIndexOf(ch);\\n}\\n\")), mdx(\"p\", null, \"Can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int fromIndex\"), \" to specify a certain index to search from.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"b2189c59-641c-5ed9-8218-66af8b3cc1a6","fields":{"slug":"/Java String","title":"Java String"}}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-maps\"\n  }, \"Java Maps\"), mdx(\"p\", null, \"Common implementations: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LinkedHashMap\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TreeMap\")), mdx(\"p\", null, \"An object that maps keys to maps.\"), mdx(\"h2\", {\n    \"id\": \"basic-methods\"\n  }, \"Basic methods\"), mdx(\"h3\", {\n    \"id\": \"putk-key-v-value--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"put(K key, V value) : V\")), mdx(\"p\", null, \"Associates specified key with specified value in this map.\"), mdx(\"h3\", {\n    \"id\": \"getk-key--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"get(K key) : V\")), mdx(\"p\", null, \"Returns the value to which the key is mapped, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if there is no mapping.\"), mdx(\"h3\", {\n    \"id\": \"removek-key--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"remove(K key) : V\")), mdx(\"p\", null, \"Removes the mapping from this map if it is present. Returns the value or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if it wasn't present.\"), mdx(\"h3\", {\n    \"id\": \"removek-key-v-value--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"remove(K key, V value) : boolean\")), mdx(\"p\", null, \"Removes the mapping from this map only if it is mapped to the specified value.\"), mdx(\"h3\", {\n    \"id\": \"replacek-key-v-value--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"replace(K key, V value) : V\")), mdx(\"p\", null, \"Replaces the mapping at the key if it is mapped to some value (including a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" value).\"), mdx(\"p\", null, \"Returns the previously assigned value, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" if it does not exist.\"), mdx(\"h3\", {\n    \"id\": \"replacek-key-v-oldvalue-v-newvalue--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"replace(K key, V oldValue, V newValue) : boolean\")), mdx(\"p\", null, \"Replaces the mapping at the key with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"newValue\"), \" if it is currently mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"oldValue\"), \".\"), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if the value was replaced.\"), mdx(\"h3\", {\n    \"id\": \"clear--void\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"clear() : void\")), mdx(\"p\", null, \"Removes all mappings from the map.\"), mdx(\"h3\", {\n    \"id\": \"containskeyk-key--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"containsKey(K key) : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if map contains specified key.\"), mdx(\"h3\", {\n    \"id\": \"containsvaluek-value--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"containsValue(K value) : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if map maps one or more keys to the specified value.\"), mdx(\"h3\", {\n    \"id\": \"entryset--setmapentrykv\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"entrySet() : Set<Map.Entry<K,V>>\")), mdx(\"p\", null, \"Returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Set\"), \" of mappings.\"), mdx(\"h3\", {\n    \"id\": \"keyset--setk\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"keySet() : Set<K>\")), mdx(\"p\", null, \"Returns a set of the key values.\"), mdx(\"h3\", {\n    \"id\": \"values--collectionv\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"values() : Collection<V>\")), mdx(\"p\", null, \"Returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Collection\"), \" of the values contained in the map.\"), mdx(\"h3\", {\n    \"id\": \"isempty--boolean\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"isEmpty() : boolean\")), mdx(\"p\", null, \"Returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if the map contains no key-value mappings.\"), mdx(\"h2\", {\n    \"id\": \"useful-methods\"\n  }, \"Useful methods\"), mdx(\"h3\", {\n    \"id\": \"getordefaultk-key-v-defaultvalue--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"getOrDefault(K key, V defaultValue) : V\")), mdx(\"p\", null, \"Returns the value to which the key is mapped, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" if there is no mapping.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> freqMap = new HashMap<>();\\n\\n// will place 1 at \\\"a\\\" with zero as a default value\\nfreqMap.put(\\\"a\\\", freqMap.getOrDefault(\\\"a\\\", 0) + 1);\\n\")), mdx(\"h3\", {\n    \"id\": \"computek-key-functionk-key-v-value--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"compute(K key, Function(K key, V value) : V) : V\")), mdx(\"p\", null, \"Computes mapping for specified key and its currently mapped value. If there is no mapping, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is mapped to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"p\", null, \"Returns the computed value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will place 1 at key \\\"a\\\"\\nintMap.compute(\\\"a\\\", (key, value) -> value == null ? 1 : value + 1);\\n\\n// will place 2 at key \\\"a\\\"\\nintMap.compute(\\\"a\\\", (key, value) -> value == null ? 1 : value + 1);\\n\")), mdx(\"h3\", {\n    \"id\": \"computeifabsentk-key-functionk-key--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"computeIfAbsent(K key, Function(K key) : V) : V\")), mdx(\"p\", null, \"If the specified key is not associated with a value (or is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \") it will compute value using mapping function and enter into the map.\"), mdx(\"p\", null, \"Returns the computed value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will place 1 at key \\\"a\\\" and return 1\\nintMap.computeIfAbsent(\\\"a\\\", (key) -> 1);\\n\\n// will not change the value at \\\"a\\\" and return 1\\nintMap.computeIfAbsent(\\\"a\\\", (key) -> 5);\\n\")), mdx(\"h3\", {\n    \"id\": \"computeifpresentk-key-functionk-key-v-value--v--v\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"computeIfPresent(K key, Function(K key, V value) : V) : V\")), mdx(\"p\", null, \"If the specified key is present and non-null, it will compute the new value using the mapping function (unless the mapping function returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \").\"), mdx(\"p\", null, \"Returns the computed value;\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Map<String, Integer> intMap = new HashMap<>();\\n\\n// will do nothing\\nintMap.computeIfPresent(\\\"a\\\", (key, value) -> 1);\\n\\nintMap.put(\\\"a\\\", 5);\\n\\n// will change value at key \\\"a\\\" to 10 and return 10\\nintMap.computeIfAbsent(\\\"a\\\", (key, value) -> value + 5);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"id":"c042d9ea-935d-5409-94d9-7a34b38e7acd","fields":{"slug":"/Java Maps","title":"Java Maps"}}}],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"brain-bank\"\n  }, \"Brain Bank\"), mdx(\"h2\", {\n    \"id\": \"foamlinktodofoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"todo\"), \"\"), mdx(\"h2\", {\n    \"id\": \"foamlinkinboxfoamlink\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"h2\"\n  }, \"inbox\"), \"\"), mdx(\"h3\", {\n    \"id\": \"contents\"\n  }, \"Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Azure SSO Integration\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Complexity\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Event Listener Handler Map React\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Java\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"foamlink\", {\n    parentName: \"li\"\n  }, \"Redux Observable Setup\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"062389c4-86fc-5682-b5ac-8c7d9f5fd85f","fields":{"slug":"/home","title":"Brain Bank"}}}]},"fields":{"slug":"/Java","title":"Java"}}},"pageContext":{"id":"f7ebd8c6-140f-5d7d-b988-851d0c62f77d"}},
    "staticQueryHashes": ["1968664781","2221750479","2468095761","2557268104","3120354889","654337312"]}